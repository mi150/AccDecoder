from DRL_con.pro_mv import find_refer,find_re_refer,move_bbox,move_re_bbox
import copy
from sklearn.decomposition import PCA
from PIL import Image
import time as T
from DRL_con import diff_processor
#from backend.object_detector import Detector
import pickle
import torchvision.transforms as transforms
import numpy as np
from gym import spaces
from gym.utils import seeding
from dds_utils import (Results, read_results_dict, filter_bbox_group,evaluate, cleanup, Region,
                       compute_regions_size, merge_boxes_in_results, extract_images_from_video,calc_iou)
import time as T
import math
"""
thres=range(50,800,50)
thres=[i/1000 for i in thres]
# print(len(thres))
#r_thres=range(0,2200,75)
r_thres=range(0,3000,600)
"""
###
ground_path='D:\\VASRL\\server\\server\\my_dds_sr_619\\visual_f1score\\trafficcam_1_dds_gt'
ground_path='D:\\VASRL\\video_test_gt'
#ground_path='video_test_gt'
raw_images_path='D:\\VASRL\\server\\server\\my_dds_sr_619\\dataset\\video_test\\src\\'
thres=range(0,800,10)
#thres=range(0,800,40)
thres=[i/1000 for i in thres]
# print(len(thres))
#r_thres=range(0,2200,75)
r_thres=range(0,3000,100)
r_thres=[i/1000 for i in r_thres]

#
# with open("reward_2250.txt", "rb") as get_myprofile:
#     reward = pickle.load(get_myprofile)
#
# reward=[i[0] for i in reward]
#
# #75x30
# #(1,3,5,15,25,75)x(1,2,3,5,6,10,15,30)
# i=35
# maxf1=0
# while i<2250:
#     if int(i/75)%2!=0:
#         i+=1
#         continue
#     maxf1=max(maxf1,reward[i])
#     i+=75
# print(maxf1)
#75x30 0.8392
#25x30 0.8392
#15x30 0.8392
#5x30  0.8362
#1x30  0.8215
#75x15 0.8392
#75x10 0.8392
#75x5  0.8370
#75x3  0.8370
#75x1  0.8378
#15x15 0.8372
#15x10 0.8392
#15x5  0.8372
#15x3  0.8732
#15x1  0.8345
#25x1  0.8356
#25x3  0.8356
#25x5  0.8362
#25x10 0.8392
#25x15 0.8375
#5x15  0.8362
#5x10  0.8362
#5x10  0.8362
#5x3   0.7748
#5x1   0.7475
#3x1   0.8170
#3x3   0.8180
#3x10  0.8392
#3x15  0.8345









with open('D:\\VASRL\\mv\\I_frame.txt', "rb") as get_myprofile:
    I_frame = pickle.load(get_myprofile)

I_frame=[i-1 for i in I_frame]
#I_frame=[0,  29, 58, 87, 116, 145, 450, 464, 493, 522, 551, 580, 1050, 1073, 1102, 1131, 1160, 1189, 1218, 1247, 1276, 1305, 1334, 2280, 2291, 2320, 2349, 2378, 2407, 2436, 2465, 2494, 2523, 2552, 2581, 2610, 2639, 2668]

print((I_frame))
a=[0, 18, 38, 61, 84, 104, 129, 143,  450, 467, 500, 517, 533, 548, 563, 577, 590, 1050, 1065, 1085, 1108, 1133, 1158, 1183, 1208, 1228, 1253, 1278, 1303, 1323, 1347,  2280, 2291, 2301, 2311, 2322, 2332, 2342, 2352, 2365, 2378, 2390, 2403, 2421, 2439, 2452, 2475, 2494, 2511, 2525, 2534, 2546, 2557, 2567, 2578, 2593, 2613, 2628, 2644, 2658, 2666, 2676, 2692]
a=[0, 18, 38, 61, 84, 104, 129, 143, 150, 232, 270, 300, 330, 344, 355, 390, 420, 438, 448, 450, 467, 500, 517, 533, 548, 563, 577, 590, 600, 627, 660, 677, 699, 712, 725, 736, 750, 774, 795, 810, 820, 831, 841, 851, 864, 879, 895, 900, 916, 928, 941, 955, 971, 988, 1002, 1020, 1037, 1050, 1065, 1085, 1108, 1133, 1158, 1183, 1208, 1228, 1253, 1278, 1303, 1323, 1347, 1350, 1361, 1374, 1389, 1404, 1422, 1438, 1454, 1467, 1480, 1494, 1505, 1516, 1530, 1542, 1553, 1568, 1581, 1594, 1608, 1622, 1637, 1650, 1661, 1675, 1680, 1710, 1729, 1744, 1758, 1776, 1793, 1808, 1821, 1833, 1846, 1858, 1871, 1885, 1894, 1904, 1914, 1924, 1935, 1945, 1955, 1964, 1974, 1990, 2007, 2017, 2026, 2036, 2046, 2055, 2064, 2079, 2094, 2102, 2118, 2126, 2136, 2147, 2164, 2175, 2190, 2207, 2225, 2246, 2268, 2280, 2291, 2301, 2311, 2322, 2332, 2342, 2352, 2365, 2378, 2390, 2403, 2421, 2439, 2452, 2475, 2494, 2511]
a = [0, 14, 24, 33, 46, 66, 87, 100, 113, 138, 150, 203, 232, 290, 303, 322, 348, 353, 359, 424, 449, 459, 475, 511, 551, 588, 600, 627, 655, 669, 687, 712, 736, 750, 776, 796, 813, 828, 841, 851, 864, 874, 885, 895, 928, 948, 981, 1012, 1030, 1058, 1078, 1100, 1123, 1140, 1158, 1175, 1193, 1210, 1228, 1245, 1264, 1284, 1302, 1319, 1344, 1369, 1384, 1404, 1417, 1431, 1444, 1458, 1469, 1481, 1494, 1504, 1514, 1525, 1539, 1552, 1568, 1582, 1596, 1612, 1626, 1642, 1661, 1682, 1708, 1734, 1758, 1776, 1793, 1803, 1813, 1833, 1846, 1858, 1871, 1886, 1902, 1918, 1936, 1951, 1964, 1979, 1994, 2006, 2016, 2025, 2041, 2057, 2069, 2079, 2091, 2104, 2117, 2129, 2143, 2166, 2177, 2192, 2205, 2216, 2227, 2248, 2271, 2285, 2298, 2311, 2322, 2332, 2342, 2355, 2371, 2384, 2409, 2428, 2447, 2472, 2491, 2509, 2526, 2538, 2552, 2563, 2584, 2604, 2625, 2639, 2655, 2673, 2686, 2701, 2726, 2740, 2751, 2781, 2811, 2865, 2900, 2910, 2920]

P_=[3, 6, 9, 12, 15, 18, 21, 24, 27, 28, 32, 35, 38, 41, 44, 47, 50, 53, 56, 57, 61, 64, 67, 70, 73, 76, 79, 82, 85, 86, 90, 93, 96, 99, 102, 105, 108, 111, 114, 115, 119, 122, 125, 128, 131, 134, 137, 140, 143, 144, 148, 151, 154, 157, 160, 163, 166, 169, 172, 173, 177, 180, 183, 186, 189, 192, 195, 198, 201, 202, 206, 209, 212, 215, 218, 221, 224, 227, 230, 231, 235, 238, 241, 244, 247, 250, 253, 256, 259, 260, 264, 267, 270, 273, 276, 279, 282, 285, 288, 289, 293, 296, 299, 302, 305, 308, 311, 314, 317, 318, 322, 325, 328, 331, 334, 337, 340, 343, 346, 347, 351, 354, 357, 360, 363, 366, 369, 372, 375, 376, 380, 383, 386, 389, 392, 395, 398, 401, 404, 405, 409, 412, 415, 418, 421, 424, 427, 430, 433, 434, 438, 441, 444, 447, 453, 456, 459, 462, 463, 467, 470, 473, 476, 479, 482, 485, 488, 491, 492, 496, 499, 502, 505, 508, 511, 514, 517, 520, 521, 525, 528, 531, 534, 537, 540, 543, 546, 549, 550, 554, 557, 560, 563, 566, 569, 572, 575, 578, 579, 583, 586, 589, 592, 595, 598, 599, 601, 604, 607, 608, 612, 615, 618, 621, 624, 627, 630, 633, 636, 637, 641, 644, 647, 650, 653, 656, 659, 662, 665, 666, 670, 673, 676, 679, 682, 685, 688, 691, 694, 695, 699, 702, 705, 708, 711, 714, 717, 720, 723, 724, 728, 731, 734, 737, 740, 743, 746, 749, 752, 753, 757, 760, 763, 766, 769, 772, 775, 778, 781, 782, 786, 789, 792, 795, 798, 801, 804, 807, 810, 811, 815, 818, 821, 824, 827, 830, 833, 836, 839, 840, 844, 847, 850, 853, 856, 859, 862, 865, 868, 869, 873, 876, 879, 882, 885, 888, 891, 894, 897, 898, 902, 905, 908, 911, 914, 917, 920, 923, 926, 927, 931, 934, 937, 940, 943, 946, 949, 952, 955, 956, 960, 963, 966, 969, 972, 975, 978, 981, 984, 985, 989, 992, 995, 998, 1001, 1004, 1007, 1010, 1013, 1014, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1043, 1047, 1048, 1049, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1072, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1101, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1130, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1159, 1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 1188, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 1217, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1246, 1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 1275, 1279, 1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1304, 1308, 1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 1333, 1337, 1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 1362, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 1387, 1390, 1391, 1395, 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419, 1420, 1424, 1427, 1430, 1433, 1436, 1439, 1442, 1445, 1448, 1449, 1453, 1456, 1459, 1462, 1465, 1468, 1471, 1474, 1477, 1478, 1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 1507, 1511, 1514, 1517, 1520, 1523, 1526, 1529, 1532, 1535, 1536, 1540, 1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1565, 1569, 1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593, 1594, 1598, 1601, 1604, 1607, 1610, 1613, 1616, 1619, 1622, 1623, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 1652, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1678, 1680, 1681, 1685, 1688, 1691, 1694, 1697, 1700, 1703, 1706, 1709, 1710, 1714, 1717, 1720, 1723, 1726, 1729, 1732, 1735, 1738, 1739, 1743, 1746, 1749, 1752, 1755, 1758, 1761, 1764, 1767, 1768, 1772, 1775, 1778, 1781, 1784, 1787, 1790, 1793, 1796, 1797, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825, 1826, 1830, 1833, 1836, 1839, 1842, 1845, 1848, 1851, 1854, 1855, 1859, 1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883, 1884, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1913, 1917, 1920, 1923, 1926, 1929, 1932, 1935, 1938, 1941, 1942, 1946, 1949, 1952, 1955, 1958, 1961, 1964, 1967, 1970, 1971, 1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996, 1999, 2000, 2004, 2007, 2010, 2013, 2016, 2019, 2022, 2025, 2028, 2029, 2033, 2036, 2039, 2042, 2045, 2048, 2051, 2054, 2057, 2058, 2062, 2065, 2068, 2071, 2074, 2077, 2080, 2083, 2086, 2087, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 2112, 2115, 2116, 2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141, 2144, 2145, 2149, 2152, 2155, 2158, 2161, 2164, 2167, 2170, 2173, 2174, 2178, 2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2203, 2207, 2210, 2213, 2216, 2219, 2222, 2225, 2228, 2231, 2232, 2236, 2239, 2242, 2245, 2248, 2251, 2254, 2257, 2260, 2261, 2265, 2268, 2271, 2274, 2277, 2278, 2279, 2283, 2286, 2289, 2290, 2294, 2297, 2300, 2303, 2306, 2309, 2312, 2315, 2318, 2319, 2323, 2326, 2329, 2332, 2335, 2338, 2341, 2344, 2347, 2348, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 2377, 2381, 2384, 2387, 2390, 2393, 2396, 2399, 2402, 2405, 2406, 2410, 2413, 2416, 2419, 2422, 2425, 2428, 2431, 2434, 2435, 2439, 2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2464, 2468, 2471, 2474, 2477, 2480, 2483, 2486, 2489, 2492, 2493, 2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2522, 2526, 2529, 2532, 2535, 2538, 2541, 2544, 2547, 2550, 2551, 2555, 2558, 2561, 2564, 2567, 2570, 2573, 2576, 2579, 2580, 2584, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608, 2609, 2613, 2616, 2619, 2622, 2625, 2628, 2631, 2634, 2637, 2638, 2642, 2645, 2648, 2651, 2654, 2657, 2660, 2663, 2666, 2667, 2671, 2674, 2677, 2680, 2683, 2686, 2689, 2692, 2695, 2696, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2725, 2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750, 2753, 2754, 2758, 2761, 2764, 2767, 2770, 2773, 2776, 2779, 2782, 2783, 2787, 2790, 2793, 2796, 2799, 2802, 2805, 2808, 2811, 2812, 2816, 2819, 2822, 2825, 2828, 2831, 2834, 2837, 2840, 2841, 2845, 2848, 2851, 2854, 2857, 2860, 2863, 2866, 2869, 2870, 2874, 2877, 2880, 2883, 2886, 2889, 2892, 2895, 2898, 2899, 2903, 2906, 2909, 2912, 2915, 2918, 2921, 2924, 2927, 2928, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 2957, 2961, 2964, 2967, 2970, 2973, 2976, 2979, 2982, 2985, 2986, 2990, 2993, 2996]
b=[0, 18, 38, 61, 84, 104, 129, 143, 150, 232, 270, 300, 330, 344, 355, 390, 420, 438, 448, 450, 467, 482, 500, 517, 533, 548, 563, 577, 590, 600, 627, 660, 668, 677, 687, 699, 712, 725, 736, 750, 774, 795, 810, 820, 831, 841, 851, 864, 879, 895, 900, 916, 928, 941, 955, 971, 988, 1002, 1020, 1037, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1089, 1093, 1097, 1100, 1104, 1108, 1112, 1115, 1119, 1123, 1128, 1133, 1138, 1143, 1148, 1153, 1158, 1163, 1168, 1173, 1178, 1183, 1188, 1193, 1198, 1203, 1208, 1213, 1218, 1223, 1228, 1233, 1238, 1243, 1248, 1253, 1258, 1263, 1268, 1273, 1278, 1283, 1288, 1293, 1298, 1303, 1308, 1313, 1318, 1323, 1328, 1332, 1337, 1342, 1347, 1350, 1361, 1374, 1389, 1404, 1422, 1438, 1454, 1467, 1480, 1494, 1505, 1516, 1530, 1542, 1553, 1568, 1581, 1594, 1608, 1622, 1637, 1650, 1661, 1675, 1680, 1710, 1729, 1744, 1758, 1776, 1793, 1808, 1821, 1833, 1846, 1858, 1871, 1885, 1894, 1904, 1914, 1924, 1935, 1945, 1955, 1964, 1974, 1990, 2007, 2017, 2026, 2036, 2046, 2055, 2064, 2072, 2079, 2086, 2094, 2102, 2110, 2118, 2126, 2136, 2147, 2164, 2175, 2190, 2199, 2207, 2214, 2225, 2235, 2246, 2257, 2268, 2280, 2291, 2301, 2311, 2322, 2332, 2342, 2352, 2365, 2378, 2390, 2403, 2421, 2430, 2439, 2452, 2475, 2494, 2511, 2525, 2534, 2546, 2557, 2567, 2578, 2593, 2613, 2628, 2644, 2658, 2666, 2670, 2676, 2683, 2692]
print(list(set(I_frame) & set(P_)))
i_f=0
print(len(a))
p_f=0
for i in a:
    if (i in I_frame) :
        i_f+=1
    if i in [3, 6, 9, 12, 15, 18, 21, 24, 27, 28, 32, 35, 38, 41, 44, 47, 50, 53, 56, 57, 61, 64, 67, 70, 73, 76, 79, 82, 85, 86, 90, 93, 96, 99, 102, 105, 108, 111, 114, 115, 119, 122, 125, 128, 131, 134, 137, 140, 143, 144, 148, 151, 154, 157, 160, 163, 166, 169, 172, 173, 177, 180, 183, 186, 189, 192, 195, 198, 201, 202, 206, 209, 212, 215, 218, 221, 224, 227, 230, 231, 235, 238, 241, 244, 247, 250, 253, 256, 259, 260, 264, 267, 270, 273, 276, 279, 282, 285, 288, 289, 293, 296, 299, 302, 305, 308, 311, 314, 317, 318, 322, 325, 328, 331, 334, 337, 340, 343, 346, 347, 351, 354, 357, 360, 363, 366, 369, 372, 375, 376, 380, 383, 386, 389, 392, 395, 398, 401, 404, 405, 409, 412, 415, 418, 421, 424, 427, 430, 433, 434, 438, 441, 444, 447, 453, 456, 459, 462, 463, 467, 470, 473, 476, 479, 482, 485, 488, 491, 492, 496, 499, 502, 505, 508, 511, 514, 517, 520, 521, 525, 528, 531, 534, 537, 540, 543, 546, 549, 550, 554, 557, 560, 563, 566, 569, 572, 575, 578, 579, 583, 586, 589, 592, 595, 598, 599, 601, 604, 607, 608, 612, 615, 618, 621, 624, 627, 630, 633, 636, 637, 641, 644, 647, 650, 653, 656, 659, 662, 665, 666, 670, 673, 676, 679, 682, 685, 688, 691, 694, 695, 699, 702, 705, 708, 711, 714, 717, 720, 723, 724, 728, 731, 734, 737, 740, 743, 746, 749, 752, 753, 757, 760, 763, 766, 769, 772, 775, 778, 781, 782, 786, 789, 792, 795, 798, 801, 804, 807, 810, 811, 815, 818, 821, 824, 827, 830, 833, 836, 839, 840, 844, 847, 850, 853, 856, 859, 862, 865, 868, 869, 873, 876, 879, 882, 885, 888, 891, 894, 897, 898, 902, 905, 908, 911, 914, 917, 920, 923, 926, 927, 931, 934, 937, 940, 943, 946, 949, 952, 955, 956, 960, 963, 966, 969, 972, 975, 978, 981, 984, 985, 989, 992, 995, 998, 1001, 1004, 1007, 1010, 1013, 1014, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1043, 1047, 1048, 1049, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1072, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1101, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1130, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1159, 1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 1188, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 1217, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1246, 1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 1275, 1279, 1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1304, 1308, 1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 1333, 1337, 1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 1362, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 1387, 1390, 1391, 1395, 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419, 1420, 1424, 1427, 1430, 1433, 1436, 1439, 1442, 1445, 1448, 1449, 1453, 1456, 1459, 1462, 1465, 1468, 1471, 1474, 1477, 1478, 1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 1507, 1511, 1514, 1517, 1520, 1523, 1526, 1529, 1532, 1535, 1536, 1540, 1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1565, 1569, 1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593, 1594, 1598, 1601, 1604, 1607, 1610, 1613, 1616, 1619, 1622, 1623, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 1652, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1678, 1680, 1681, 1685, 1688, 1691, 1694, 1697, 1700, 1703, 1706, 1709, 1710, 1714, 1717, 1720, 1723, 1726, 1729, 1732, 1735, 1738, 1739, 1743, 1746, 1749, 1752, 1755, 1758, 1761, 1764, 1767, 1768, 1772, 1775, 1778, 1781, 1784, 1787, 1790, 1793, 1796, 1797, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825, 1826, 1830, 1833, 1836, 1839, 1842, 1845, 1848, 1851, 1854, 1855, 1859, 1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883, 1884, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1913, 1917, 1920, 1923, 1926, 1929, 1932, 1935, 1938, 1941, 1942, 1946, 1949, 1952, 1955, 1958, 1961, 1964, 1967, 1970, 1971, 1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996, 1999, 2000, 2004, 2007, 2010, 2013, 2016, 2019, 2022, 2025, 2028, 2029, 2033, 2036, 2039, 2042, 2045, 2048, 2051, 2054, 2057, 2058, 2062, 2065, 2068, 2071, 2074, 2077, 2080, 2083, 2086, 2087, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 2112, 2115, 2116, 2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141, 2144, 2145, 2149, 2152, 2155, 2158, 2161, 2164, 2167, 2170, 2173, 2174, 2178, 2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2203, 2207, 2210, 2213, 2216, 2219, 2222, 2225, 2228, 2231, 2232, 2236, 2239, 2242, 2245, 2248, 2251, 2254, 2257, 2260, 2261, 2265, 2268, 2271, 2274, 2277, 2278, 2279, 2283, 2286, 2289, 2290, 2294, 2297, 2300, 2303, 2306, 2309, 2312, 2315, 2318, 2319, 2323, 2326, 2329, 2332, 2335, 2338, 2341, 2344, 2347, 2348, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 2377, 2381, 2384, 2387, 2390, 2393, 2396, 2399, 2402, 2405, 2406, 2410, 2413, 2416, 2419, 2422, 2425, 2428, 2431, 2434, 2435, 2439, 2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2464, 2468, 2471, 2474, 2477, 2480, 2483, 2486, 2489, 2492, 2493, 2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2522, 2526, 2529, 2532, 2535, 2538, 2541, 2544, 2547, 2550, 2551, 2555, 2558, 2561, 2564, 2567, 2570, 2573, 2576, 2579, 2580, 2584, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608, 2609, 2613, 2616, 2619, 2622, 2625, 2628, 2631, 2634, 2637, 2638, 2642, 2645, 2648, 2651, 2654, 2657, 2660, 2663, 2666, 2667, 2671, 2674, 2677, 2680, 2683, 2686, 2689, 2692, 2695, 2696, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2725, 2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750, 2753, 2754, 2758, 2761, 2764, 2767, 2770, 2773, 2776, 2779, 2782, 2783, 2787, 2790, 2793, 2796, 2799, 2802, 2805, 2808, 2811, 2812, 2816, 2819, 2822, 2825, 2828, 2831, 2834, 2837, 2840, 2841, 2845, 2848, 2851, 2854, 2857, 2860, 2863, 2866, 2869, 2870, 2874, 2877, 2880, 2883, 2886, 2889, 2892, 2895, 2898, 2899, 2903, 2906, 2909, 2912, 2915, 2918, 2921, 2924, 2927, 2928, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 2957, 2961, 2964, 2967, 2970, 2973, 2976, 2979, 2982, 2985, 2986, 2990, 2993, 2996]:
        p_f+=1
print(i_f)
print(p_f)
print(14/104)
print(66/1034)
# print(len(a))
# c=list(set(b) - set(a))
# c.sort()
# print(c)
class Envs3:

    def __init__(self, height, width, length, states, diff_gop, times, result,h_result,res, features):
        # self.args=create_args()
        with open('D:\\VASRL\\mv\\I_frame.txt', "rb") as get_myprofile:
            self.I_frame = pickle.load(get_myprofile)
            print(self.I_frame)
        #print(self.I_frame)
        self.environment_title='video_V0'
        #self.action_space=spaces.Discrete(75)
        self.action_space = spaces.Box(
            low=np.array([-1]),
            high=np.array([1]),
            dtype=np.float32
        )
        self.f1list=[]
        high=np.zeros(128+60,dtype=np.float32)
        high=np.array([np.finfo(np.float32).max for _ in high])
        self.observation_space = spaces.Box(-high, high, dtype=np.float32)
        self.seed()
        self.queue = 0
        self.height = height
        self.width = width
        self.length = length
        self.states = states
        self.diff_gop = diff_gop
        self.idx = 0
        self.goplen = 30
        self.a1 = 0.5
        self.a2 = 0.5
        self.state = []
        self.last_frame = None
        self.last_sr_frame=None
        self.diff_last = None
        self.l_result = None
        self._max_episode_steps=100
        #self.model = Detector()
        self.ground_truth_dict = read_results_dict(ground_path)
        self.times = times
        self.result = result
        self.show_results = Results()
        self.h_result=h_result
        self.res=res
        self.d_pro = diff_processor.DiffProcessor.str2class('edge')(0)
        self.features = features
        pca = PCA(n_components=128)  # 实例化
        self.pca = pca.fit(np.array(features))  # 拟合模型
        self.srl=[]
        self.dtl=[]
        self.s_a=0
        self.d_a=0
        # self.server=Server(self.args)
        # self.client=Client(self.args.hname, self.args, self.server)
    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]
    def reset(self):
        self.idx = 30
        self.queue = 0
        state_ = copy.deepcopy(self.states[0])
        res_ = copy.deepcopy(self.res[1:30])
        self.last_sr_frame=0
        #
        self.last_frame = 0
        self.diff_last = 0
        state_.insert(0, 0)
        res_.insert(0,0)
        #print(len(res_),self.idx)
        #
        self.state = np.array(state_)
        state_ += self.pca.transform([self.features[0]])[0].tolist()
        state_+=res_
        # state_.append(self.queue)
        # print(len(self.states[0]))
        # print(len(state_))
        return np.array(state_)
    # def delete(self):
    #     for r in self.l_result:
    #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)

    def get_SRlist(self,s_frames,thre):
        srlist=[]
        for fra in s_frames:
            if sum(self.res[self.last_sr_frame:fra+1])>thre or fra in [0,150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
                self.last_sr_frame=fra
                srlist.append(fra)
        return srlist
    def move(self,frame_idx):
        if frame_idx + 1 in self.I_frame:
            for r in self.l_result:
                label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                #final_results.append(r)
        else:
            _d_result = Results()
            refer = find_refer(frame_idx + 1) - 1
            if refer + 1 == frame_idx:
                for r in self.l_result:
                    label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                    _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                    _x, _y = _x / 4, _y / 4
                    # _x, _y = 0, 0

                    r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                               label,
                               0, origin="mpeg")
                    _d_result.append(r)
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    #final_results.append(r)
            elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx) != -1:
                for r in self.l_result:
                    label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                    _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                    __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
                    if _x != 0 and _y != 0:
                        _x = _x - __x
                        _y = _y - __y
                    _x, _y = _x / 4, _y / 4

                    # _x, _y = 0, 0

                    r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                               label,
                               0, origin="mpeg")
                    _d_result.append(r)
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    #final_results.append(r)
            else:

                for r in self.l_result:
                    label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                    _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
                    _x, _y = _x / 4, _y / 4

                    # _x, _y =0,0

                    r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf, label,
                               0, origin="mpeg")
                    _d_result.append(r)
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    #final_results.append(r)
            self.l_result = _d_result.regions_dict[frame_idx]

    def resize(self,r):
        if (r.x+r.w)>1:
            r.w=1-r.x
        if (r.y + r.h) > 1:
            r.w = 1 - r.y
        r.x=max(0,r.x)
        r.y=max(0,r.y)
        r.h=max(0,r.h)
        r.w=max(0,r.w)
        r.x = min(1, r.x)
        r.y = min(1, r.y)
        return r

    def isexist(self,region,result):
        for r in result:
            if calc_iou(r,region)>0.1:
                return True
        return False
    def isdelete(self,r):

        if r.w==0 or r.h==0:
            return False
        return True

    def clear_sr(self,frame_idx):
        res=[]
        for region in self.l_result:
            flag=False
            for h_region in self.result[frame_idx]:
                if filter_bbox_group(region, h_region, 0.1):
                    flag=True
                    break
            if not flag:
                res.append(region)
        self.l_result=res+self.result[frame_idx]

    def step(self, action):
        s_frames = self.d_pro.batch_diff_noobj_last(thres[int(action%80)], self.state, (self.idx - self.goplen),
                                                    self.goplen)
        #self.select.append(s_frames)r_thres[int(action/15)]
        SR_list=self.get_SRlist(s_frames,r_thres[int(action/80)])
        # s_frames=SR_list
        # s_frames = self.d_pro.batch_diff_noobj_last((action%0.1)*10, self.state, (self.idx - self.goplen),self.goplen)
        # #SR_list=self.get_SRlist(s_frames,r_thres[int(action[1])])
        # SR_list = self.get_SRlist(s_frames,(action-action%0.1)*3)
        #print(action,(action%0.1)*10,(action-action%0.1)*3)
        self.srl+=SR_list
        self.dtl+=s_frames
        # s_frames = self.d_pro.batch_diff_noobj_last(np.array(thres[self.d_a]), self.state, (self.idx - self.goplen),                                             self.goplen)
        # SR_list = self.get_SRlist(s_frames, r_thres[self.s_a])
        # s_frames = [0, 16, 29, 39, 50, 58, 67, 78, 87, 101, 115, 116, 135, 145, 162, 174, 203, 232, 261, 290, 294, 297, 302, 307,
        #            310, 318, 319, 330, 345, 348, 351, 354, 356, 365, 377, 382, 386, 394, 406, 412, 428, 435, 441, 446, 450, 454,
        #            457, 462, 464, 480, 493, 497, 500, 505, 511, 518, 522, 527, 532, 540, 549, 551, 567, 580, 588, 600, 604, 608,
        #            609, 629, 638, 661, 667, 671, 674, 679, 684, 689, 694, 696, 713, 725, 746, 754, 766, 780, 783, 796, 809, 812,
        #            821, 831, 841, 854, 869, 870, 882, 895, 899, 901, 903, 905, 907, 909, 912, 915, 918, 921, 925, 928, 932, 936,
        #            941, 948, 956, 957, 977, 986, 1003, 1015, 1044, 1052, 1058, 1065, 1072, 1073, 1101, 1102, 1111, 1122, 1131,
        #            1147, 1160, 1177, 1189, 1214, 1218, 1246, 1247, 1276, 1304, 1305, 1333, 1334, 1352, 1363, 1385, 1392, 1410,
        #            1421, 1440, 1450, 1468, 1479, 1496, 1508, 1526, 1537, 1557, 1566, 1587, 1595, 1614, 1624, 1644, 1653, 1674,
        #            1682, 1697, 1711, 1720, 1731, 1740, 1751, 1762, 1769, 1787, 1798, 1815, 1827, 1843, 1856, 1871, 1885, 1900,
        #            1914, 1929, 1943, 1958, 1972, 1988, 2001, 2017, 2030, 2046, 2059, 2075, 2088, 2103, 2117, 2118, 2120, 2122,
        #            2123, 2124, 2125, 2126, 2127, 2129, 2130, 2132, 2134, 2136, 2138, 2140, 2142, 2144, 2146, 2164, 2175, 2193,
        #            2204, 2214, 2225, 2233, 2252, 2262, 2268, 2274, 2280, 2284, 2288, 2291, 2306, 2320, 2333, 2347, 2349, 2361,
        #            2376, 2378, 2390, 2403, 2407, 2422, 2436, 2451, 2465, 2475, 2490, 2494, 2511, 2523, 2538, 2552, 2568, 2581,
        #            2597, 2610, 2627, 2639, 2655, 2668, 2681, 2696, 2697, 2708, 2726, 2745, 2755, 2770, 2784, 2803, 2813, 2830,
        # #            2842, 2845, 2848, 2850, 2854, 2859, 2862, 2867, 2871, 2893, 2900, 2922, 2929, 2946]
        # s_frames=[0, 29, 41, 55, 58, 63, 68, 73, 77, 82, 87, 96, 100, 105, 113, 116, 145, 174, 203, 232, 261, 290, 319, 348, 358, 376, 377, 406, 435, 444, 450, 458, 464, 474, 483, 493, 505, 517, 522, 531, 543, 551, 560, 570, 580, 590, 600, 609, 619, 629, 638, 648, 658, 667, 678, 689, 695, 696, 701, 710, 718, 725, 732, 741, 749, 750, 754, 762, 769, 776, 783, 807, 812, 823, 836, 841, 852, 866, 870, 877, 887, 896, 899, 902, 911, 919, 927, 928, 937, 947, 957, 968, 979, 986, 995, 1005, 1015, 1029, 1041, 1044, 1055, 1063, 1070, 1073, 1093, 1102, 1119, 1131, 1147, 1160, 1183, 1189, 1210, 1218, 1239, 1247, 1270, 1276, 1298, 1305, 1327, 1334, 1353, 1363, 1392, 1416, 1421, 1449, 1450, 1479, 1505, 1508, 1537, 1566, 1595, 1624, 1653, 1680, 1682, 1705, 1711, 1740, 1765, 1769, 1782, 1794, 1798, 1816, 1827, 1851, 1856, 1881, 1885, 1906, 1914, 1927, 1940, 1943, 1963, 1972, 1990, 2001, 2022, 2030, 2051, 2059, 2069, 2077, 2085, 2088, 2111, 2117, 2123, 2129, 2135, 2141, 2146, 2158, 2167, 2175, 2187, 2197, 2204, 2211, 2218, 2225, 2232, 2233, 2248, 2262, 2272, 2281, 2291, 2298, 2305, 2312, 2319, 2320, 2329, 2338, 2348, 2349, 2357, 2366, 2374, 2378, 2388, 2396, 2407, 2419, 2430, 2436, 2447, 2459, 2465, 2471, 2476, 2481, 2486, 2490, 2494, 2510, 2521, 2523, 2533, 2548, 2552, 2564, 2577, 2581, 2587, 2597, 2606, 2610, 2620, 2627, 2635, 2639, 2649, 2658, 2663, 2667, 2668, 2674, 2681, 2689, 2697, 2713, 2726, 2734, 2741, 2749, 2754, 2755, 2784, 2807, 2813, 2842, 2850, 2859, 2866, 2871, 2877, 2884, 2891, 2897, 2900, 2929, 2934, 2939, 2945, 2950, 2956, 2958, 2986]
        #
        # SR_list = [0, 18, 38, 61, 84, 104, 129, 143, 150, 232, 270, 300, 330, 344, 355, 390, 420, 438, 448, 450, 467, 500,
        #      517, 533, 548, 563, 577, 590, 600, 627, 660, 677, 699, 712, 725, 736, 750, 774, 795, 810, 820, 831, 841,
        #      851, 864, 879, 895, 900, 916, 928, 941, 955, 971, 988, 1002, 1020, 1037, 1050,1065, 1085, 1108, 1133,
        #      1158, 1183, 1208, 1228, 1253, 1278, 1303, 1323, 1347, 1350, 1361, 1374, 1389, 1404, 1422, 1438, 1454, 1467,
        #      1480, 1494, 1505, 1516, 1530, 1542, 1553, 1568, 1581, 1594, 1608, 1622, 1637, 1650, 1661, 1675, 1680, 1710,
        #      1729, 1744, 1758, 1776, 1793, 1808, 1821, 1833, 1846, 1858, 1871, 1885, 1894, 1904, 1914, 1924, 1935, 1945,
        #      1955, 1964, 1974, 1990, 2007, 2017, 2026, 2036, 2046, 2055, 2064, 2079, 2094, 2102, 2118, 2126, 2136, 2147,
        #      2164, 2175, 2190, 2207, 2225, 2246, 2268, 2280, 2291, 2301, 2311, 2322, 2332, 2342, 2352, 2365, 2378, 2390,
        #      2403, 2421, 2439, 2452, 2475, 2494, 2511, 2525, 2534, 2546, 2557, 2567, 2578, 2593, 2613, 2628, 2644, 2658,
        #      2666, 2676, 2692, 2700, 2712, 2737, 2749, 2758, 2769, 2779, 2790, 2800, 2811, 2880, 2922]
        # s_frames = [0, 18, 38, 61, 84, 104, 129, 143, 150, 232, 270, 300, 330, 344, 355, 390, 420, 438, 448, 450, 467, 482,
        #      500, 517, 533, 548, 563, 577, 590, 600, 627, 660, 668, 677, 687, 699, 712, 725, 736, 750, 774, 795, 810,
        #      820, 831, 841, 851, 864, 879, 895, 900, 916, 928, 941, 955, 971, 988, 1002, 1020, 1037, 1050, 1055, 1060,
        #      1065, 1070, 1075, 1080, 1085, 1089, 1093, 1097, 1100, 1104, 1108, 1112, 1115, 1119, 1123, 1128, 1133, 1138,
        #      1143, 1148, 1153, 1158, 1163, 1168, 1173, 1178, 1183, 1188, 1193, 1198, 1203, 1208, 1213, 1218, 1223, 1228,
        #      1233, 1238, 1243, 1248, 1253, 1258, 1263, 1268, 1273, 1278, 1283, 1288, 1293, 1298, 1303, 1308, 1313, 1318,
        #      1323, 1328, 1332, 1337, 1342, 1347, 1350, 1361, 1374, 1389, 1404, 1422, 1438, 1454, 1467, 1480, 1494, 1505,
        #      1516, 1530, 1542, 1553, 1568, 1581, 1594, 1608, 1622, 1637, 1650, 1661, 1675, 1680, 1710, 1729, 1744, 1758,
        #      1776, 1793, 1808, 1821, 1833, 1846, 1858, 1871, 1885, 1894, 1904, 1914, 1924, 1935, 1945, 1955, 1964, 1974,
        #      1990, 2007, 2017, 2026, 2036, 2046, 2055, 2064, 2072, 2079, 2086, 2094, 2102, 2110, 2118, 2126, 2136, 2147,
        #      2164, 2175, 2190, 2199, 2207, 2214, 2225, 2235, 2246, 2257, 2268, 2280, 2291, 2301, 2311, 2322, 2332, 2342,
        #      2352, 2365, 2378, 2390, 2403, 2421, 2430, 2439, 2452, 2475, 2494, 2511, 2525, 2534, 2546, 2557, 2567, 2578,
        #      2593, 2613, 2628, 2644, 2658, 2666, 2670, 2676, 2683, 2692, 2700, 2712, 2724, 2737, 2749, 2758, 2769, 2779,
        #      2790, 2800, 2811, 2880, 2922]
        #[0.8, 0.667, 0.71, 0.774, 0.786, 0.714, 0.571, 0.714, 0.8, 0.8, 0.759, 0.759, 0.759, 0.733, 0.71, 0.765, 0.69, 0.714, 0.741, 0.625, 0.71, 0.8, 0.8, 0.688, 0.667, 0.8, 0.889, 0.69, 0.692]
        #[0.8, 0.667, 0.733, 0.759, 0.815, 0.759, 0.69, 0.692, 0.769, 0.769, 0.714, 0.714, 0.714, 0.815, 0.714, 0.733, 0.759, 0.733, 0.741, 0.645, 0.621, 0.593, 0.692, 0.643, 0.692, 0.75, 0.833, 0.741, 0.71]

        # SR_list =[]
        # s=range(180)
        # s_frames=np.array(s).tolist()
        #s_frames=[0,30,60,90,120,150]
        #SR_list=s_frames
        # print("s_a",int(action/15))
        # print('SR',SR_list)
        # print('s_frames',s_frames)
        final_results = Results()
        # 取s_frames中帧做检测的f1score
        if s_frames:
            self.last_frame = s_frames[-1]
        time = 0
        #all_time = 0
        # print(self.idx-self.goplen)

        for frame_idx in range(self.idx - self.goplen, self.idx):
            if frame_idx in s_frames:
                if frame_idx in SR_list:
                    # if frame_idx==1065:
                    #     print(1065)
                    self.l_result = self.h_result[frame_idx]
                    #self.l_result = self.result[frame_idx]
                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        # print(y)
                        r = Region(frame_idx, x, y, w, h, conf, label,
                                   0, origin="mpeg")
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        #if self.isdelete(r):
                        final_results.append(r)

                    time += 0.21+self.times[frame_idx]+0.02
                else:
                    #for r in self.self.result[frame_idx]:
                    _d_result = Results()
                    #self.move(frame_idx)
                    #self.clear_sr(frame_idx)
                    self.l_result = self.result[frame_idx]

                    time += self.times[frame_idx]+0.02
                    # for r in self.l_result:
                    #     label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
                    #     r = Region(frame_idx, x, y, w, h, conf, label,
                    #                0, origin="mpeg")
                    #     r = self.resize(r)
                    #     if self.isdelete(r):
                    #         _d_result.append(r)
                    # self.l_result = merge_boxes_in_results(_d_result.regions_dict, 0.3, 0.3).regions_dict[frame_idx]

                    for r in self.l_result:
                        label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
                        #print(y)
                        r = Region(frame_idx, x, y, w, h, conf, label,
                                   0, origin="mpeg")
                        r = self.resize(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        if self.isdelete(r):
                            final_results.append(r)
                #all_time += self.times[frame_idx]
                continue
            # else:
            #     for r in self.l_result:
            #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
            #         # print(y)
            #         r = Region(frame_idx, x, y, w, h, conf, label,
            #                    0, origin="mpeg")
            #         r = self.resize(r)
            #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
            #         if self.isdelete(r):
            #             final_results.append(r)
            #     continue
            #     for r in self.l_result:
            #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
            #         r = Region(frame_idx, x, y, w, h, conf, label,
            #                    0, origin="mpeg")
            #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
            #         final_results.append(r)
            #     #all_time += self.times[frame_idx]
            #     continue
            ti6me1 = T.time()
            if frame_idx + 1 in self.I_frame:
                for r in self.l_result:
                    label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
                    r = Region(frame_idx, x, y, w, h, conf, label,
                               0, origin="mpeg")
                    r = self.resize(r)
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    if self.isdelete(r):
                        final_results.append(r)
#0.7868061224489794
            else:

                _d_result = Results()
                refer = find_refer(frame_idx + 1) - 1
                if refer + 1 == frame_idx:
                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                        _x, _y = _x / 4, _y / 4
                        # _x, _y = 0, 0

                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                                   label,
                                   0, origin="mpeg")
                        r = self.resize(r)
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        if self.isdelete(r):
                            final_results.append(r)

                elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx)!=-1:
                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                        __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
                        if _x != 0 and _y != 0:
                            _x = _x - __x
                            _y = _y - __y
                        _x, _y = _x / 4, _y / 4
                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                                   label,
                                   0, origin="mpeg")
                        r = self.resize(r)
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        if self.isdelete(r):
                            final_results.append(r)

                else:

                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
                        _x, _y = _x / 4, _y / 4
                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf, label,
                                   0, origin="mpeg")
                        r = self.resize(r)
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        if self.isdelete(r):
                            final_results.append(r)

                self.l_result = _d_result.regions_dict[frame_idx]
                # print('f_r',final_results.regions_dict)
            #all_time += self.times[frame_idx]
            # print('result',results)

        final_results = merge_boxes_in_results(final_results.regions_dict, 0.3, 0.3)

        #self.show_results.combine_results(final_results)
        tp, fp, fn, _, _, _, f1,f1_list = evaluate(
            self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
            0.5, 0.5, 0.4, 0.4)
        self.f1list+=f1_list
        # final_results = Results()
        # # 取s_frames中帧做检测的f1score
        # #print('f1:',f1)
        # # print(self.idx-self.goplen)
        # for frame_idx in range(self.idx - self.goplen, self.idx):
        #
        #     results = self.result[frame_idx]
        #
        #     # all_time+=self.times[frame_idx]
        #     for r in results:
        #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
        #         r = Region(frame_idx, x, y, w, h, conf, label,
        #                    0, origin="mpeg")
        #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
        #         final_results.append(r)
        #         # print('f_r',final_results.regions_dict)
        # tp, fp, fn, _, _, _, s_f1 = evaluate(
        #     self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
        #     0.3, 0.5, 0.4, 0.4)

        # print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)

        reward = self.a1 * (f1)  - self.a2 * (1 if time>1-0.2 else 0)

        # 排队时间
        # self.queue =max(0,(self.queue+time-1))
        ###
        # 计算前一个gop剩余feature差值
        state_ = copy.deepcopy(self.states[int(self.idx / self.goplen)])
        res_ = copy.deepcopy(self.res[self.idx-self.goplen+1:self.idx])
        if self.idx not in [150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
            if s_frames:
                # print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
                self.diff_last = np.sum(self.state[(s_frames[-1] % 30) + 1:]) + self.diff_gop[int(self.idx / 30) - 1]
                state_.insert(0, self.diff_last)
            else:
                self.diff_last += np.sum(self.state) + self.diff_gop[int(self.idx / 30) - 1]
                state_.insert(0, self.diff_last)
            res_.insert(0,sum(self.res[self.last_sr_frame+1:self.idx-self.goplen+1]))
        else:
            res_.insert(0,0)
            state_.insert(0, 0)
        ###
        self.state = np.array(state_)
        self.idx += self.goplen
        # return state_, reward, (self.idx==self.length)
        if self.idx == 2970:
            done = True
        else:
            done = False
        #print(len(res_), self.idx)
        state_ += self.pca.transform([self.features[self.idx - self.goplen]])[0].tolist()
        state_+=res_
        # state_.append(self.queue)
        # print(self.idx)
        # print('time',time)
        # print('f1',f1)

        return np.array(state_), reward, done, None,(f1,time)


#print((r_thres[14]))
#r_thres=[0,0,0,0]
# class Envs3:
#
#     def __init__(self, height,width,length,states,diff_gop,times,result,features):
#         #self.args=create_args()
#         self.queue=0
#         self.height=height
#         self.width=width
#         self.length=length
#         self.states=states
#         self.diff_gop=diff_gop
#         self.idx=0
#         self.goplen=30
#         self.a1=0.5
#         self.a2=0.5
#         self.state=[]
#         self.last_frame=None
#         self.diff_last=None
#         self.l_result=None
#         self.model=Detector()
#         self.ground_truth_dict = read_results_dict(ground_path)
#         self.times=times
#         self.result=result
#         self.d_pro=diff_processor.DiffProcessor.str2class('edge')(0)
#         self.features = features
#         pca = PCA(n_components=128)  # 实例化
#         self.pca = pca.fit(np.array(features))  # 拟合模型
#         self.trans=transforms.ToTensor()
#         #self.server=Server(self.args)
#         #self.client=Client(self.args.hname, self.args, self.server)
#
#     def reset(self):
#         self.idx=30
#         self.queue = 0
#         state_ =copy.deepcopy(self.states[0])
#         #
#         self.last_frame =0
#         self.diff_last =0
#         state_.insert(0,0)
#         #
#         self.state =np.array(state_)
#         image = Image.open(raw_images_path + f"{str(int(0)).zfill(10)}.png")
#         tensor = self.trans(image)
#         #state_ += self.features[0]
#         #state_.append(self.queue)
#         #print(len(self.states[0]))
#         return np.array(state_),tensor.unsqueeze(0)
#
#     def step(self,action):
#
#
#         #print(action,self.state)
#         #print(self.state)
#         s_frames=self.d_pro.batch_diff_noobj_last(np.array(thres)[action],self.state,(self.idx-self.goplen),self.goplen)
#         #
#         # print('state',self.state)
#         # print('s_frames',s_frames)
#         #s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]
#
#         final_results=Results()
#         #取s_frames中帧做检测的f1score
#         f1=0
#         s_f1=1
#         results=self.result[self.last_frame]
#         #print(self.last_frame)
#         if s_frames:
#             self.last_frame=s_frames[-1]
#         time=0
#         all_time=0
#         #print(self.idx-self.goplen)
#
#         for frame_idx in range(self.idx-self.goplen,self.idx):
#             if frame_idx in s_frames:
#                 #print(raw_images_path,f"{str(frame_idx).zfill(10)}.png")
#                 # frame=cv.imread(raw_images_path+f"{str(int(frame_idx)).zfill(10)}.png")
#                 # starttime = T.time()
#                 # results=self.model.infer(frame)
#                 # endtime = T.time()
#                 # time += float(endtime - starttime)
#                 # #print(results)
#                 results=self.result[frame_idx]
#                 time+=self.times[frame_idx]
#             all_time+=self.times[frame_idx]
#             #print('result',results)
#             for label, conf, (x, y, w, h) in results:
#                 r = Region(frame_idx, x, y, w, h, conf, label,
#                            0, origin="mpeg")
#                 # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                 final_results.append(r)
#                 #print('f_r',final_results.regions_dict)
#         tp, fp, fn, _, _, _, f1 = evaluate(
#             self.idx-1, final_results.regions_dict, self.ground_truth_dict,
#             0.3, 0.5, 0.4, 0.4)
#         final_results=Results()
#         #取s_frames中帧做检测的f1score
#
#         #print(self.idx-self.goplen)
#         for frame_idx in range(self.idx-self.goplen,self.idx):
#
#             results=self.result[frame_idx]
#
#             #all_time+=self.times[frame_idx]
#             for label, conf, (x, y, w, h) in results:
#                 r = Region(frame_idx, x, y, w, h, conf, label,
#                            0, origin="mpeg")
#                 # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                 final_results.append(r)
#                 #print('f_r',final_results.regions_dict)
#         tp, fp, fn, _, _, _, s_f1 = evaluate(
#             self.idx-1, final_results.regions_dict, self.ground_truth_dict,
#             0.3, 0.5, 0.4, 0.4)
#
#         #print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
#         reward=self.a1*(f1)/s_f1-self.a2*(time+self.queue)/(all_time)
#
#         # 排队时间
#         #self.queue =max(0,(self.queue+time-1))
#         ###
#         #计算前一个gop剩余feature差值
#         state_ = copy.deepcopy(self.states[int(self.idx/self.goplen)])
#         if self.idx not in [150,300,450,600,750,900,1050,1350,1680,2280,2700]:
#             if s_frames:
#                 #print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
#                 self.diff_last=np.sum(self.state[(s_frames[-1]%30)+1:])+self.diff_gop[int(self.idx/30)-1]
#                 state_.insert(0,self.diff_last)
#             else:
#                 self.diff_last+=np.sum(self.state)+self.diff_gop[int(self.idx/30)-1]
#                 state_.insert(0,self.diff_last)
#         else:
#             state_.insert(0, 0)
#         ###
#         self.state = np.array(state_)
#         self.idx += self.goplen
#         #return state_, reward, (self.idx==self.length)
#         if self.idx==2970:
#             done=True
#         else:
#             done=False
#         image = Image.open(raw_images_path + f"{str(int(self.idx-self.goplen)).zfill(10)}.png")
#         tensor=self.trans(image)
#         #state_ += self.features[self.idx - self.goplen]
#         #state_.append(self.queue)
#         return np.array(state_),tensor.unsqueeze(0),reward,done,None

# class Envs3:
#
#     def __init__(self, height, width, length, states, diff_gop, times, result,h_result,res, features):
#         # self.args=create_args()
#         with open('D:\\VASRL\\mv\\I_frame.txt', "rb") as get_myprofile:
#             self.I_frame = pickle.load(get_myprofile)
#         #print(self.I_frame)
#         self.environment_title='video_V0'
#         self.action_space=spaces.Discrete(75)
#         high=np.zeros(128+60,dtype=np.float32)
#         high=np.array([np.finfo(np.float32).max for _ in high])
#         self.observation_space = spaces.Box(-high, high, dtype=np.float32)
#         self.seed()
#         self.queue = 0
#         self.height = height
#         self.width = width
#         self.length = length
#         self.states = states[0]
#         self.statess=states
#         self.diff_gop = diff_gop
#         self.idx = 0
#         self.goplen = 30
#         self.a1 = 0.5
#         self.a2 = 0.5
#         self.speed=[]
#         self.density=[]
#         self.state = []
#         self.last_frame = None
#         self.last_sr_frame=None
#         self.diff_last = None
#         self.l_result = []
#         self._max_episode_steps=100
#         self.turn=1
#         #self.model = Detector()
#         self.ground_truth_dict = read_results_dict(ground_path)
#         self.times = times
#         self.result = result[0]
#         self.results = result
#         #self.show_results = Results()
#         self.select=[]
#         self.select_sr=[]
#         self.h_result=h_result[0]
#         self.h_results = h_result
#         self.res=res
#         self.d_pro = diff_processor.DiffProcessor.str2class('edge')(0)
#         self.features = features
#         pca = PCA(n_components=128)  # 实例化
#         self.pca = pca.fit(np.array(features))  # 拟合模型
#         # self.server=Server(self.args)
#         # self.client=Client(self.args.hname, self.args, self.server)
#     def seed(self, seed=None):
#         self.np_random, seed = seeding.np_random(seed)
#         return [seed]
#
#     def changeP(self):
#         self.state=self.states[self.turn]
#         self.h_result = self.h_results[self.turn]
#         self.result = self.results[self.turn]
#         self.idx = 30
#         self.queue = 0
#         state_ = copy.deepcopy(self.states[0])
#         res_ = copy.deepcopy(self.res[1:30])
#         self.last_sr_frame = 0
#         #
#         self.last_frame = 0
#         self.diff_last = 0
#         state_.insert(0, 0)
#         res_.insert(0, 0)
#         # print(len(res_),self.idx)
#         #
#         self.state = np.array(state_)
#         state_ += self.pca.transform([self.features[0]])[0].tolist()
#         state_ += res_
#         state_.append(self.turn)
#         # print(len(self.states[0]))
#         # print(len(state_))
#         return np.array(state_)
#
#     def reset(self):
#         self.turn=0
#         return self.changeP()
#     # def delete(self):
#     #     for r in self.l_result:
#     #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#
#     def get_SRlist(self,s_frames,thre):
#         srlist=[]
#         for fra in s_frames:
#             if sum(self.res[self.last_sr_frame:fra+1])>thre or fra in [0,150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
#                 self.last_sr_frame=fra
#                 srlist.append(fra)
#         return srlist
#     def move(self,frame_idx):
#         if frame_idx + 1 in self.I_frame:
#             for r in self.l_result:
#                 label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                 r = Region(frame_idx, x, y, w, h, conf, label,
#                            0, origin="mpeg")
#                 # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                 #final_results.append(r)
#         else:
#             _d_result = Results()
#             refer = find_refer(frame_idx + 1) - 1
#             if refer + 1 == frame_idx:
#                 for r in self.l_result:
#                     label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                     _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                     _x, _y = _x / 4, _y / 4
#                     # _x, _y = 0, 0
#
#                     r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
#                                label,
#                                0, origin="mpeg")
#                     _d_result.append(r)
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     #final_results.append(r)
#             elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx) != -1:
#                 for r in self.l_result:
#                     label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                     _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                     __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
#                     if _x != 0 and _y != 0:
#                         _x = _x - __x
#                         _y = _y - __y
#                     _x, _y = _x / 4, _y / 4
#
#                     # _x, _y = 0, 0
#
#                     r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
#                                label,
#                                0, origin="mpeg")
#                     _d_result.append(r)
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     #final_results.append(r)
#             else:
#
#                 for r in self.l_result:
#                     label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                     _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
#                     _x, _y = _x / 4, _y / 4
#
#                     # _x, _y =0,0
#
#                     r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf, label,
#                                0, origin="mpeg")
#                     _d_result.append(r)
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     #final_results.append(r)
#             self.l_result = _d_result.regions_dict[frame_idx]
#
#     def resize(self,r):
#         if (r.x+r.w)>1:
#             r.w=1-r.x
#         if (r.y + r.h) > 1:
#             r.w = 1 - r.y
#         r.x=max(0,r.x)
#         r.y=max(0,r.y)
#         r.h=max(0,r.h)
#         r.w=max(0,r.w)
#         r.x = min(1, r.x)
#         r.y = min(1, r.y)
#         return r
#
#     def isexist(self,region,result):
#         for r in result:
#             if calc_iou(r,region)>0.1:
#                 return True
#         return False
#     def isdelete(self,r):
#
#         if r.w==0 or r.h==0:
#             return False
#         return True
#     def clear_sr(self,frame_idx):
#         res=[]
#         for region in self.l_result:
#             flag=False
#             for h_region in self.h_result[frame_idx]:
#                 if filter_bbox_group(region, h_region, 0.005):
#                     flag=True
#                     break
#             if not flag:
#                 res.append(region)
#         self.l_result=res+self.h_result[frame_idx]
#     def step(self, action):
#         #print(action)
#         # print(action,self.state)
#         # print(self.state)np.array(r_thres)
#         #print(action)
#         #action=0
#         s_frames = self.d_pro.batch_diff_noobj_last(thres[np.array(action%15)], self.state, (self.idx - self.goplen),
#                                                     self.goplen)
#         #self.select.append(s_frames)
#         SR_list=self.get_SRlist(s_frames,r_thres[int(action/15)])
#         #SR_list=[]
#         #SR_list=s_frames
#         self.select+=s_frames
#         #SR_list=s_frames
#         self.select_sr+=SR_list
#         #SR_list=s_frames
#         # s_frames = self.d_pro.batch_diff_noobj_last(np.array(thres[10]), self.state, (self.idx - self.goplen),
#         #                                             self.goplen)
#         # SR_list=self.get_SRlist(s_frames,r_thres[int(4)])
#         # s_frames = self.d_pro.batch_diff_noobj_last(0.15, self.state, (self.idx - self.goplen),
#         #                                             self.goplen)
#         #print('thres:',0.5)
#         # print('state',self.state)
#         # print('s_frames',s_frames)
#         # print('SR_list',SR_list)
#         # s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]
#         # s_frames=[0, 26, 30, 37, 47, 58, 60, 65, 70, 75, 81, 86, 90, 100, 112, 120, 126, 131, 136, 141, 144, 148, 150, 180, 193, 207, 210, 240, 270, 287, 300, 305, 309, 313, 317, 321, 325, 329, 330, 337, 344, 350, 355, 360, 390, 398, 405, 411, 417, 420, 437, 446, 450, 455, 458, 462, 465, 469, 473, 476, 480, 483, 487, 491, 495, 499, 503, 506, 510, 513, 517, 521, 524, 528, 532, 535, 539, 540, 543, 547, 551, 554, 558, 561, 565, 569, 570, 573, 577, 580, 583, 586, 590, 594, 597, 600, 613, 625, 630, 643, 656, 660, 690, 699, 712, 720, 730, 742, 750, 761, 770, 779, 780, 795, 807, 810, 826, 840, 865, 870, 881, 891, 900, 905, 909, 912, 916, 919, 922, 924, 927, 929, 930, 934, 937, 941, 945, 948, 952, 955, 959, 960, 964, 967, 971, 975, 978, 983, 987, 990, 997, 1005, 1013, 1020, 1024, 1027, 1031, 1035, 1038, 1042, 1045, 1049, 1050, 1064, 1078, 1080, 1093, 1105, 1110, 1120, 1131, 1140, 1152, 1163, 1170, 1184, 1198, 1200, 1214, 1228, 1230, 1244, 1259, 1260, 1274, 1287, 1290, 1302, 1313, 1320, 1334, 1348, 1350, 1374, 1380, 1403, 1410, 1435, 1440, 1466, 1470, 1494, 1500, 1519, 1530, 1550, 1560, 1584, 1590, 1614, 1620, 1644, 1650, 1672, 1680, 1700, 1710, 1716, 1721, 1726, 1731, 1736, 1740, 1755, 1768, 1770, 1782, 1793, 1800, 1819, 1830, 1841, 1852, 1860, 1872, 1885, 1890, 1910, 1920, 1931, 1941, 1950, 1968, 1980, 1997, 2010, 2025, 2040, 2053, 2065, 2070, 2086, 2100, 2108, 2116, 2123, 2130, 2152, 2160, 2179, 2190, 2212, 2220, 2231, 2243, 2250, 2269, 2280, 2289, 2297, 2305, 2310, 2318, 2326, 2333, 2340, 2343, 2346, 2348, 2351, 2354, 2358, 2362, 2365, 2369, 2370, 2373, 2377, 2380, 2384, 2387, 2389, 2392, 2396, 2400, 2407, 2417, 2425, 2430, 2438, 2449, 2460, 2463, 2465, 2468, 2471, 2473, 2476, 2479, 2481, 2483, 2485, 2487, 2489, 2490, 2499, 2507, 2513, 2520, 2530, 2541, 2550, 2560, 2570, 2580, 2586, 2595, 2604, 2610, 2618, 2625, 2631, 2639, 2640, 2648, 2655, 2660, 2664, 2668, 2670, 2676, 2682, 2690, 2698, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2727, 2730, 2760, 2770, 2779, 2788, 2790, 2799, 2808, 2817, 2820, 2850, 2854, 2859, 2863, 2866, 2870, 2871, 2874, 2877, 2880, 2910, 2919, 2927, 2934, 2940, 2963]
#         # SR_list = self.get_SRlist(s_frames, np.array(r_thres)[2])
#         # SR_list = self.get_SRlist(s_frames, np.array(r_thres)[int(120 / 30)])
#         #s_frames=[0, 29, 41, 55, 58, 63, 68, 73, 77, 82, 87, 96, 100, 105, 113, 116, 145, 174, 203, 232, 261, 290, 319, 348, 358, 376, 377, 406, 435, 444, 450, 458, 464, 474, 483, 493, 505, 517, 522, 531, 543, 551, 560, 570, 580, 590, 600, 609, 619, 629, 638, 648, 658, 667, 678, 689, 695, 696, 701, 710, 718, 725, 732, 741, 749, 750, 754, 762, 769, 776, 783, 807, 812, 823, 836, 841, 852, 866, 870, 877, 887, 896, 899, 902, 911, 919, 927, 928, 937, 947, 957, 968, 979, 986, 995, 1005, 1015, 1029, 1041, 1044, 1055, 1063, 1070, 1073, 1093, 1102, 1119, 1131, 1147, 1160, 1183, 1189, 1210, 1218, 1239, 1247, 1270, 1276, 1298, 1305, 1327, 1334, 1353, 1363, 1392, 1416, 1421, 1449, 1450, 1479, 1505, 1508, 1537, 1566, 1595, 1624, 1653, 1680, 1682, 1705, 1711, 1740, 1765, 1769, 1782, 1794, 1798, 1816, 1827, 1851, 1856, 1881, 1885, 1906, 1914, 1927, 1940, 1943, 1963, 1972, 1990, 2001, 2022, 2030, 2051, 2059, 2069, 2077, 2085, 2088, 2111, 2117, 2123, 2129, 2135, 2141, 2146, 2158, 2167, 2175, 2187, 2197, 2204, 2211, 2218, 2225, 2232, 2233, 2248, 2262, 2272, 2281, 2291, 2298, 2305, 2312, 2319, 2320, 2329, 2338, 2348, 2349, 2357, 2366, 2374, 2378, 2388, 2396, 2407, 2419, 2430, 2436, 2447, 2459, 2465, 2471, 2476, 2481, 2486, 2490, 2494, 2510, 2521, 2523, 2533, 2548, 2552, 2564, 2577, 2581, 2587, 2597, 2606, 2610, 2620, 2627, 2635, 2639, 2649, 2658, 2663, 2667, 2668, 2674, 2681, 2689, 2697, 2713, 2726, 2734, 2741, 2749, 2754, 2755, 2784, 2807, 2813, 2842, 2850, 2859, 2866, 2871, 2877, 2884, 2891, 2897, 2900, 2929, 2934, 2939, 2945, 2950, 2956, 2958, 2986]
#
#         #SR_list=[]
#         final_results = Results()
#         # 取s_frames中帧做检测的f1score
#         f1 = 0
#         s_f1 = 1
#         # results=self.result[self.last_frame]
#         # print(self.last_frame)
#         if s_frames:
#             self.last_frame = s_frames[-1]
#         time = 0
#         #all_time = 0
#         # print(self.idx-self.goplen)
#         start=T.time()
#         speedidx=[]
#         densityidx=[]
#         for frame_idx in range(self.idx - self.goplen, self.idx):
#             bbox=0
#             if frame_idx in s_frames:
#                 if frame_idx in SR_list:
#                     self.l_result = self.h_result[frame_idx]
#                     #self.l_result = self.result[frame_idx]
#                     for r in self.l_result:
#                         r=self.resize(r)
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         # print(y)
#                         if w*h<0.2:
#                             bbox+=w*h
#                         r = Region(frame_idx, x, y, w, h, conf, label,
#                                    0, origin="mpeg")
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         if self.isdelete(r):
#                             final_results.append(r)
#                         #self.show_results.append(r)
#                     time += 0.21+self.times[frame_idx]
#                     densityidx.append(bbox)
#                 else:
#                     #for r in self.self.result[frame_idx]:
#                     #self.move(frame_idx)
#                     _d_result=Results()
#                     self.l_result = self.result[frame_idx]
#                     #self.clear_sr(frame_idx)
#                     time += self.times[frame_idx]
#                     # for r in self.l_result:
#                     #     label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
#                     #     r = Region(frame_idx, x, y, w, h, conf, label,
#                     #                0, origin="mpeg")
#                     #     r = self.resize(r)
#                     #     if self.isdelete(r):
#                     #         _d_result.append(r)
#                     # self.l_result = merge_boxes_in_results(_d_result.regions_dict, 0.3, 0.3).regions_dict[frame_idx]
#
#                 #print(self.l_result)
#                 #print(self.l_results,self.result[frame_idx])
#                     for r in self.l_result:
#                         r = self.resize(r)
#                         label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
#                         #print(y)
#
#                         r = Region(frame_idx, x, y, w, h, conf, label,
#                                    0, origin="mpeg")
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         r = self.resize(r)
#                         if self.isdelete(r):
#                             final_results.append(r)
#                             #self.show_results.append(r)
#
#                 #all_time += self.times[frame_idx]
#                 continue
#             # else:
#             #     for r in self.l_result:
#             #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#             #         r = Region(frame_idx, x, y, w, h, conf, label,
#             #                    0, origin="mpeg")
#             #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#             #         final_results.append(r)
#             #     #all_time += self.times[frame_idx]
#             #     continue
#             if frame_idx + 1 in self.I_frame:
#                 for r in self.l_result:
#                     r = self.resize(r)
#                     label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
#                     r = Region(frame_idx, x, y, w, h, conf, label,
#                                0, origin="mpeg")
#                     r = self.resize(r)
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     if self.isdelete(r):
#                         final_results.append(r)
#                     #self.show_results.append(r)
#             else:
#                 _d_result = Results()
#                 refer = find_refer(frame_idx + 1) - 1
#                 if refer + 1 == frame_idx:
#                     for r in self.l_result:
#                         r = self.resize(r)
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                         _x, _y = _x / 4, _y / 4
#                         speedidx.append(math.sqrt(_x*_x+_y*_y))
#                         # _x, _y = 0, 0
#                         # if self.idx==1500:
#                         #     print(_x,_y)
#                         r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
#                                    label,
#                                    0, origin="mpeg")
#                         r = self.resize(r)
#                         _d_result.append(r)
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         if self.isdelete(r):
#                             final_results.append(r)
#                         #self.show_results.append(r)
#                 elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx)!=-1:
#                     for r in self.l_result:
#                         r = self.resize(r)
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                         __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
#                         if _x != 0 and _y != 0:
#                             _x = _x - __x
#                             _y = _y - __y
#                         _x, _y = _x / 4, _y / 4
#                         speedidx.append(math.sqrt(_x * _x + _y * _y))
#                         # if self.idx==1500:
#                         #     print(_x,_y)
#                         # _x, _y = 0, 0
#                         r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
#                                    label,
#                                    0, origin="mpeg")
#                         r = self.resize(r)
#                         _d_result.append(r)
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         if self.isdelete(r):
#                             final_results.append(r)
#                         #self.show_results.append(r)
#                 else:
#
#                     for r in self.l_result:
#                         r = self.resize(r)
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
#                         _x, _y = _x / 4, _y / 4
#                         speedidx.append(math.sqrt(_x * _x + _y * _y))
#                         r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf, label,
#                                    0, origin="mpeg")
#                         r = self.resize(r)
#                         _d_result.append(r)
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         if self.isdelete(r):
#                             final_results.append(r)
#                         #self.show_results.append(r)
#                 self.l_result = _d_result.regions_dict[frame_idx]
#                 # print('f_r',final_results.regions_dict)
#             #all_time += self.times[frame_idx]
#             # print('result',results)
#         #final_results = merge_boxes_in_results(final_results.regions_dict, 0.3, 0.3)
#         #self.density.append(sum(densityidx)/len(densityidx))
#         #self.speed.append(sum(speedidx)/len(speedidx))
#         tp, fp, fn, _, _, _, f1 = evaluate(
#             self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
#             0.3, 0.5, 0.4, 0.4)
#         # final_results = Results()
#         # # 取s_frames中帧做检测的f1score
#         # #print('f1:',f1)
#         # # print(self.idx-self.goplen)
#         # for frame_idx in range(self.idx - self.goplen, self.idx):
#         #
#         #     results = self.result[frame_idx]
#         #
#         #     # all_time+=self.times[frame_idx]
#         #     for r in results:
#         #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#         #         r = Region(frame_idx, x, y, w, h, conf, label,
#         #                    0, origin="mpeg")
#         #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#         #         final_results.append(r)
#         #         # print('f_r',final_results.regions_dict)
#         # tp, fp, fn, _, _, _, s_f1 = evaluate(
#         #     self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
#         #     0.3, 0.5, 0.4, 0.4)
#
#         # print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
#
#         reward = self.a1 * (f1)  - self.a2 * (1 if time>0.8 else 0)
#
#         # 排队时间
#         # self.queue =max(0,(self.queue+time-1))
#         ###
#         # 计算前一个gop剩余feature差值
#         state_ = copy.deepcopy(self.states[int(self.idx / self.goplen)])
#         res_ = copy.deepcopy(self.res[self.idx-self.goplen+1:self.idx])
#         if self.idx not in [150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
#             if s_frames:
#                 # print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
#                 self.diff_last = np.sum(self.state[(s_frames[-1] % 30) + 1:]) + self.diff_gop[int(self.idx / 30) - 1]
#                 state_.insert(0, self.diff_last)
#             else:
#                 self.diff_last += np.sum(self.state) + self.diff_gop[int(self.idx / 30) - 1]
#                 state_.insert(0, self.diff_last)
#             res_.insert(0,sum(self.res[self.last_sr_frame+1:self.idx-self.goplen+1]))
#         else:
#             res_.insert(0,0)
#             state_.insert(0, 0)
#         ###
#         self.state = np.array(state_)
#         self.idx += self.goplen
#         # return state_, reward, (self.idx==self.length)
#         if self.idx == 2970 and self.turn==2:
#             done = True
#         elif self.idx==2970:
#             self.turn+=1
#             self.changeP()
#             done = False
#             return self.changeP(), reward, done, None
#         #print(len(res_), self.idx)
#         state_ += self.pca.transform([self.features[self.idx - self.goplen]])[0].tolist()
#         state_+=res_
#         state_.append(self.turn)
#
#         # print('f1',f1)
#         #print(self.idx,done)
#         return np.array(state_), reward, done, None
# class Envs2mv:
#
#     def __init__(self, height, width, length, states, diff_gop, times, result, features):
#         # self.args=create_args()
#         with open('D:\\video\\v_t\\pro_mv\\I_frame.txt', "rb") as get_myprofile:
#             self.I_frame = pickle.load(get_myprofile)
#         #print(self.I_frame)
#         self.queue = 0
#         self.height = height
#         self.width = width
#         self.length = length
#         self.states = states
#         self.diff_gop = diff_gop
#         self.idx = 0
#         self.goplen = 30
#         self.a1 = 0.5
#         self.a2 = 0.5
#         self.state = []
#         self.last_frame = None
#         self.diff_last = None
#         self.l_result = None
#         self.model = Detector()
#         self.ground_truth_dict = read_results_dict(ground_path)
#         self.times = times
#         self.result = result
#         self.d_pro = diff_processor.DiffProcessor.str2class('edge')(0)
#         self.features = features
#         pca = PCA(n_components=256)  # 实例化
#         self.pca = pca.fit(np.array(features))  # 拟合模型
#         # self.server=Server(self.args)
#         # self.client=Client(self.args.hname, self.args, self.server)
#
#     def reset(self):
#         self.idx = 30
#         self.queue = 0
#         state_ = copy.deepcopy(self.states[0])
#         #
#         self.last_frame = 0
#         self.diff_last = 0
#         state_.insert(0, 0)
#         #
#         self.state = np.array(state_)
#         state_ += self.pca.transform([self.features[0]])[0].tolist()
#         # state_.append(self.queue)
#         # print(len(self.states[0]))
#         # print(len(state_))
#         return np.array(state_)
#
#     def step(self, action):
#
#         # print(action,self.state)
#         # print(self.state)
#         s_frames = self.d_pro.batch_diff_noobj_last(np.array(thres)[action], self.state, (self.idx - self.goplen),
#                                                     self.goplen)
#         # s_frames = self.d_pro.batch_diff_noobj_last(0.15, self.state, (self.idx - self.goplen),
#         #                                             self.goplen)
#         #print('thres:',0.5)
#         # print('state',self.state)
#         # print('s_frames',s_frames)
#         # s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]
#
#         final_results = Results()
#         # 取s_frames中帧做检测的f1score
#         f1 = 0
#         s_f1 = 1
#         # results=self.result[self.last_frame]
#         # print(self.last_frame)
#         if s_frames:
#             self.last_frame = s_frames[-1]
#         time = 0
#         all_time = 0
#         # print(self.idx-self.goplen)
#
#         for frame_idx in range(self.idx - self.goplen, self.idx):
#             if frame_idx in s_frames:
#                 self.l_result = self.result[frame_idx]
#                 time += self.times[frame_idx]
#                 print(self.l_result)
#                 #print(self.l_results,self.result[frame_idx])
#                 for r in self.l_result:
#                     label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
#                     r = Region(frame_idx, x, y, w, h, conf, label,
#                                0, origin="mpeg")
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     final_results.append(r)
#                 continue
#             if frame_idx + 1 in self.I_frame:
#                 for r in self.l_result:
#                     label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
#                     r = Region(frame_idx, x.clip(0, 1), y.clip(0, 1), w, h, conf, label,
#                                0, origin="mpeg")
#                     # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                     final_results.append(r)
#             else:
#                 _d_result = []
#                 refer = find_refer(frame_idx + 1) - 1
#                 if refer + 1 == frame_idx:
#                     for r in self.l_result:
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                         _x, _y = _x / 4, _y / 4
#                         # _x, _y = 0, 0
#                         _d_result.append(
#                             (label, conf, ((x - _x / 1920).clip(0, 1), (y - _y / 1080).clip(0, 1), w, h)))
#                         r = Region(frame_idx, (x - _x / 1920).clip(0, 1), (y - _y / 1080).clip(0, 1), w, h, conf,
#                                    label,
#                                    0, origin="mpeg")
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         final_results.append(r)
#                 elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx)!=-1:
#                     for r in self.l_result:
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
#                         __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
#                         if _x != 0 and _y != 0:
#                             _x = _x - __x
#                             _y = _y - __y
#                         _x, _y = _x / 4, _y / 4
#
#                         # _x, _y = 0, 0
#                         _d_result.append(
#                             (label, conf, ((x - _x / 1920).clip(0, 1), (y - _y / 1080).clip(0, 1), w, h)))
#                         r = Region(frame_idx, (x - _x / 1920).clip(0, 1), (y - _y / 1080).clip(0, 1), w, h, conf,
#                                    label,
#                                    0, origin="mpeg")
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         final_results.append(r)
#                 else:
#
#                     for r in self.l_result:
#                         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
#                         _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
#                         _x, _y = _x / 4, _y / 4
#
#                         # _x, _y =0,0
#                         _d_result.append((label, conf, ((x + _x / 1920).clip(0, 1), (y + _y / 1080).clip(0, 1), w, h)))
#                         r = Region(frame_idx, (x - _x / 1920).clip(0, 1), (y - _y / 1080).clip(0, 1), w, h, conf, label,
#                                    0, origin="mpeg")
#                         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                         final_results.append(r)
#
#                 self.l_result = _d_result
#
#                 # print('f_r',final_results.regions_dict)
#             all_time += self.times[frame_idx]
#             # print('result',results)
#
#         tp, fp, fn, _, _, _, f1 = evaluate(
#             self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
#             0.3, 0.5, 0.4, 0.4)
#         final_results = Results()
#         # 取s_frames中帧做检测的f1score
#         #print('f1:',f1)
#         # print(self.idx-self.goplen)
#         for frame_idx in range(self.idx - self.goplen, self.idx):
#
#             results = self.result[frame_idx]
#
#             # all_time+=self.times[frame_idx]
#             for label, conf, (x, y, w, h) in results:
#                 r = Region(frame_idx, x, y, w, h, conf, label,
#                            0, origin="mpeg")
#                 # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
#                 final_results.append(r)
#                 # print('f_r',final_results.regions_dict)
#         tp, fp, fn, _, _, _, s_f1 = evaluate(
#             self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
#             0.3, 0.5, 0.4, 0.4)
#
#         # print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
#         reward = self.a1 * (f1) / s_f1 - self.a2 * (time + self.queue) / (all_time)
#
#         # 排队时间
#         # self.queue =max(0,(self.queue+time-1))
#         ###
#         # 计算前一个gop剩余feature差值
#         state_ = copy.deepcopy(self.states[int(self.idx / self.goplen)])
#         if self.idx not in [150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
#             if s_frames:
#                 # print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
#                 self.diff_last = np.sum(self.state[(s_frames[-1] % 30) + 1:]) + self.diff_gop[int(self.idx / 30) - 1]
#                 state_.insert(0, self.diff_last)
#             else:
#                 self.diff_last += np.sum(self.state) + self.diff_gop[int(self.idx / 30) - 1]
#                 state_.insert(0, self.diff_last)
#         else:
#             state_.insert(0, 0)
#         ###
#         self.state = np.array(state_)
#         self.idx += self.goplen
#         # return state_, reward, (self.idx==self.length)
#         if self.idx == 2970:
#             done = True
#         else:
#             done = False
#         state_ += self.pca.transform([self.features[self.idx - self.goplen]])[0].tolist()
#         # state_.append(self.queue)
#         return np.array(state_), reward, done, None

class Envs2mv:

    def __init__(self, height, width, length, states, diff_gop, times, result, features):
        # self.args=create_args()
        with open('D:\\video\\v_t\\pro_mv\\I_frame.txt', "rb") as get_myprofile:
            self.I_frame = pickle.load(get_myprofile)
        #print(self.I_frame)
        self.queue = 0
        self.height = height
        self.width = width
        self.length = length
        self.states = states
        self.diff_gop = diff_gop
        self.idx = 0
        self.goplen = 30
        self.a1 = 0.5
        self.a2 = 0.5
        self.state = []
        self.last_frame = None
        self.diff_last = None
        self.l_result = None
        #self.model = Detector()
        self.ground_truth_dict = read_results_dict(ground_path)
        self.times = times
        self.result = result
        self.d_pro = diff_processor.DiffProcessor.str2class('edge')(0)
        self.features = features
        pca = PCA(n_components=128)  # 实例化
        self.pca = pca.fit(np.array(features))  # 拟合模型
        # self.server=Server(self.args)
        # self.client=Client(self.args.hname, self.args, self.server)

    def reset(self):
        self.idx = 30
        self.queue = 0
        state_ = copy.deepcopy(self.states[0])
        #
        self.last_frame = 0
        self.diff_last = 0
        state_.insert(0, 0)
        #
        self.state = np.array(state_)
        state_ += self.pca.transform([self.features[0]])[0].tolist()
        # state_.append(self.queue)
        # print(len(self.states[0]))
        # print(len(state_))
        return np.array(state_)

    def step(self, action):

        # print(action,self.state)
        # print(self.state)

        s_frames = self.d_pro.batch_diff_noobj_last(np.array(thres)[action], self.state, (self.idx - self.goplen),
                                                    self.goplen)
        print(np.array(thres)[action])
        # s_frames = self.d_pro.batch_diff_noobj_last(0.15, self.state, (self.idx - self.goplen),
        #                                             self.goplen)
        #print('thres:',0.5)
        # print('state',self.state)
        # print('s_frames',s_frames)
        # s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]
        #s_frames=[0, 26, 30, 37, 47, 58, 60, 65, 70, 75, 81, 86, 90, 100, 112, 120, 126, 131, 136, 141, 144, 148, 150, 180, 193, 207, 210, 240, 270, 287, 300, 305, 309, 313, 317, 321, 325, 329, 330, 337, 344, 350, 355, 360, 390, 398, 405, 411, 417, 420, 437, 446, 450, 455, 458, 462, 465, 469, 473, 476, 480, 483, 487, 491, 495, 499, 503, 506, 510, 513, 517, 521, 524, 528, 532, 535, 539, 540, 543, 547, 551, 554, 558, 561, 565, 569, 570, 573, 577, 580, 583, 586, 590, 594, 597, 600, 613, 625, 630, 643, 656, 660, 690, 699, 712, 720, 730, 742, 750, 761, 770, 779, 780, 795, 807, 810, 826, 840, 865, 870, 881, 891, 900, 905, 909, 912, 916, 919, 922, 924, 927, 929, 930, 934, 937, 941, 945, 948, 952, 955, 959, 960, 964, 967, 971, 975, 978, 983, 987, 990, 997, 1005, 1013, 1020, 1024, 1027, 1031, 1035, 1038, 1042, 1045, 1049, 1050, 1064, 1078, 1080, 1093, 1105, 1110, 1120, 1131, 1140, 1152, 1163, 1170, 1184, 1198, 1200, 1214, 1228, 1230, 1244, 1259, 1260, 1274, 1287, 1290, 1302, 1313, 1320, 1334, 1348, 1350, 1374, 1380, 1403, 1410, 1435, 1440, 1466, 1470, 1494, 1500, 1519, 1530, 1550, 1560, 1584, 1590, 1614, 1620, 1644, 1650, 1672, 1680, 1700, 1710, 1716, 1721, 1726, 1731, 1736, 1740, 1755, 1768, 1770, 1782, 1793, 1800, 1819, 1830, 1841, 1852, 1860, 1872, 1885, 1890, 1910, 1920, 1931, 1941, 1950, 1968, 1980, 1997, 2010, 2025, 2040, 2053, 2065, 2070, 2086, 2100, 2108, 2116, 2123, 2130, 2152, 2160, 2179, 2190, 2212, 2220, 2231, 2243, 2250, 2269, 2280, 2289, 2297, 2305, 2310, 2318, 2326, 2333, 2340, 2343, 2346, 2348, 2351, 2354, 2358, 2362, 2365, 2369, 2370, 2373, 2377, 2380, 2384, 2387, 2389, 2392, 2396, 2400, 2407, 2417, 2425, 2430, 2438, 2449, 2460, 2463, 2465, 2468, 2471, 2473, 2476, 2479, 2481, 2483, 2485, 2487, 2489, 2490, 2499, 2507, 2513, 2520, 2530, 2541, 2550, 2560, 2570, 2580, 2586, 2595, 2604, 2610, 2618, 2625, 2631, 2639, 2640, 2648, 2655, 2660, 2664, 2668, 2670, 2676, 2682, 2690, 2698, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2727, 2730, 2760, 2770, 2779, 2788, 2790, 2799, 2808, 2817, 2820, 2850, 2854, 2859, 2863, 2866, 2870, 2871, 2874, 2877, 2880, 2910, 2919, 2927, 2934, 2940, 2963]
        final_results = Results()
        # 取s_frames中帧做检测的f1score
        f1 = 0
        s_f1 = 1
        # results=self.result[self.last_frame]
        # print(self.last_frame)
        if s_frames:
            self.last_frame = s_frames[-1]
        time = 0
        all_time = 0
        # print(self.idx-self.goplen)

        for frame_idx in range(self.idx - self.goplen, self.idx):
            if frame_idx in s_frames:
                self.l_result = self.result[frame_idx]
                time += self.times[frame_idx]
                #print(self.l_result)
                #print(self.l_results,self.result[frame_idx])
                for r in self.l_result:
                    label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
                    r = Region(frame_idx, x, y, w, h, conf, label,
                               0, origin="mpeg")
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    final_results.append(r)
                all_time += self.times[frame_idx]
                continue
            # else:
            #     for r in self.l_result:
            #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
            #         r = Region(frame_idx, x, y, w, h, conf, label,
            #                    0, origin="mpeg")
            #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
            #         final_results.append(r)
            #     all_time += self.times[frame_idx]
            #     continue
            if frame_idx + 1 in self.I_frame:
                for r in self.l_result:
                    label, conf, (x, y, w, h)=r.label,r.conf,(r.x,r.y,r.w,r.h)
                    r = Region(frame_idx, x, y, w, h, conf, label,
                               0, origin="mpeg")
                    # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                    final_results.append(r)
            else:
                _d_result = Results()
                refer = find_refer(frame_idx + 1) - 1
                if refer + 1 == frame_idx:
                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                        _x, _y = _x / 4, _y / 4
                        # _x, _y = 0, 0

                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                                   label,
                                   0, origin="mpeg")
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        final_results.append(r)
                elif refer == (find_refer(frame_idx) - 1) and find_refer(frame_idx)!=-1:
                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_bbox(frame_idx + 1, x, y, w, h, refer + 1)
                        __x, __y = move_bbox(frame_idx, x, y, w, h, refer + 1)
                        if _x != 0 and _y != 0:
                            _x = _x - __x
                            _y = _y - __y
                        _x, _y = _x / 4, _y / 4

                        # _x, _y = 0, 0

                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf,
                                   label,
                                   0, origin="mpeg")
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        final_results.append(r)
                else:

                    for r in self.l_result:
                        label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
                        _x, _y = move_re_bbox(frame_idx, x, y, w, h, frame_idx)
                        _x, _y = _x / 4, _y / 4

                        # _x, _y =0,0

                        r = Region(frame_idx, (x - _x / 1280), (y - _y / 720), w, h, conf, label,
                                   0, origin="mpeg")
                        _d_result.append(r)
                        # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                        final_results.append(r)
                self.l_result = _d_result.regions_dict[frame_idx]
                # print('f_r',final_results.regions_dict)
            all_time += self.times[frame_idx]
            # print('result',results)

        tp, fp, fn, _, _, _, f1 = evaluate(
            self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)
        #final_results = Results()
        # 取s_frames中帧做检测的f1score
        #print('f1:',f1)
        # print(self.idx-self.goplen)
        # for frame_idx in range(self.idx - self.goplen, self.idx):
        #
        #     results = self.result[frame_idx]
        #
        #     # all_time+=self.times[frame_idx]
        #     for r in results:
        #         label, conf, (x, y, w, h) = r.label, r.conf, (r.x, r.y, r.w, r.h)
        #         r = Region(frame_idx, x, y, w, h, conf, label,
        #                    0, origin="mpeg")
        #         # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
        #         final_results.append(r)
        #         # print('f_r',final_results.regions_dict)
        # tp, fp, fn, _, _, _, s_f1 = evaluate(
        #     self.idx - 1, final_results.regions_dict, self.ground_truth_dict,
        #     0.3, 0.5, 0.4, 0.4)

        # print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
        reward = self.a1 * (f1)  - self.a2 * (time + self.queue) / (all_time)

        # 排队时间
        # self.queue =max(0,(self.queue+time-1))
        ###
        # 计算前一个gop剩余feature差值
        state_ = copy.deepcopy(self.states[int(self.idx / self.goplen)])
        if self.idx not in [150, 300, 450, 600, 750, 900, 1050, 1350, 1680, 2280, 2700]:
            if s_frames:
                # print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
                self.diff_last = np.sum(self.state[(s_frames[-1] % 30) + 1:]) + self.diff_gop[int(self.idx / 30) - 1]
                state_.insert(0, self.diff_last)
            else:
                self.diff_last += np.sum(self.state) + self.diff_gop[int(self.idx / 30) - 1]
                state_.insert(0, self.diff_last)
        else:
            state_.insert(0, 0)
        ###
        self.state = np.array(state_)
        self.idx += self.goplen
        # return state_, reward, (self.idx==self.length)
        if self.idx == 2970:
            done = True
        else:
            done = False
        state_ += self.pca.transform([self.features[self.idx - self.goplen]])[0].tolist()
        # state_.append(self.queue)
        return np.array(state_), reward, done, None,(f1,time)

class Envs2:

    def __init__(self, height,width,length,states,diff_gop,times,result,features):
        #self.args=create_args()
        # with open('D:\\video\\pro_mv\\I_frame.txt', "rb") as get_myprofile:
        #     self.I_frame = pickle.load(get_myprofile)
        self.queue=0
        self.height=height
        self.width=width
        self.length=length
        self.states=states
        self.diff_gop=diff_gop
        self.idx=0
        self.goplen=30
        self.a1=0.5
        self.a2=0.5
        self.state=[]
        self.last_frame=None
        self.diff_last=None
        #self.l_result=None
        #self.model=Detector()
        self.ground_truth_dict = read_results_dict(ground_path)
        self.times=times
        self.result=result
        self.d_pro=diff_processor.DiffProcessor.str2class('edge')(0)
        self.features = features
        pca = PCA(n_components=256)  # 实例化
        self.pca = pca.fit(np.array(features))  # 拟合模型
        #self.server=Server(self.args)
        #self.client=Client(self.args.hname, self.args, self.server)

    def reset(self):
        self.idx=30
        self.queue = 0
        state_ =copy.deepcopy(self.states[0])
        #
        self.last_frame =0
        self.diff_last =0
        state_.insert(0,0)
        #
        self.state =np.array(state_)
        state_ += self.pca.transform([self.features[0]])[0].tolist()
        #state_.append(self.queue)
        #print(len(self.states[0]))
        #print(len(state_))
        return np.array(state_)

    def step(self,action):


        #print(action,self.state)
        #print(self.state)
        s_frames=self.d_pro.batch_diff_noobj_last(np.array(thres)[action],self.state,(self.idx-self.goplen),self.goplen)
        #
        # print('state',self.state)
        # print('s_frames',s_frames)
        #s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]

        final_results=Results()
        #取s_frames中帧做检测的f1score
        f1=0
        s_f1=1
        results=self.result[self.last_frame]
        #print(self.last_frame)
        if s_frames:
            self.last_frame=s_frames[-1]
        time=0
        all_time=0
        #print(self.idx-self.goplen)
        for frame_idx in range(self.idx-self.goplen,self.idx):
            if frame_idx in s_frames:
                #print(raw_images_path,f"{str(frame_idx).zfill(10)}.png")
                # frame=cv.imread(raw_images_path+f"{str(int(frame_idx)).zfill(10)}.png")
                # starttime = T.time()
                # results=self.model.infer(frame)
                # endtime = T.time()
                # time += float(endtime - starttime)
                # #print(results)
                results=self.result[frame_idx]
                time+=self.times[frame_idx]
            all_time+=self.times[frame_idx]
            #print('result',results)
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)


        tp, fp, fn, _, _, _, f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)
        final_results=Results()
        #取s_frames中帧做检测的f1score

        #print(self.idx-self.goplen)
        for frame_idx in range(self.idx-self.goplen,self.idx):

            results=self.result[frame_idx]

            #all_time+=self.times[frame_idx]
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)
        tp, fp, fn, _, _, _, s_f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)

        #print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
        reward=self.a1*(f1)/s_f1-self.a2*(time+self.queue)/(all_time)
        #reward = self.a1 * (f1) / s_f1 - self.a2 * (time)
        # 排队时间
        #self.queue =max(0,(self.queue+time-1))
        ###
        #计算前一个gop剩余feature差值
        state_ = copy.deepcopy(self.states[int(self.idx/self.goplen)])
        if self.idx not in [150,300,450,600,750,900,1050,1350,1680,2280,2700]:
            if s_frames:
                #print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
                self.diff_last=np.sum(self.state[(s_frames[-1]%30)+1:])+self.diff_gop[int(self.idx/30)-1]
                state_.insert(0,self.diff_last)
            else:
                self.diff_last+=np.sum(self.state)+self.diff_gop[int(self.idx/30)-1]
                state_.insert(0,self.diff_last)
        else:
            state_.insert(0, 0)
        ###
        self.state = np.array(state_)
        self.idx += self.goplen
        #return state_, reward, (self.idx==self.length)
        if self.idx==2970:
            done=True
        else:
            done=False
        state_ += self.pca.transform([self.features[self.idx - self.goplen]])[0].tolist()
        #state_.append(self.queue)
        return np.array(state_),reward,done,None


class Envs1:

    def __init__(self, height,width,length,states,diff_gop,times,result):
        #self.args=create_args()
        self.queue=0
        self.height=height
        self.width=width
        self.length=length
        self.states=states
        self.diff_gop=diff_gop
        self.idx=0
        self.goplen=30
        self.a1=0.5
        self.a2=0.5
        self.state=[]
        self.last_frame=None
        self.diff_last=None
        #self.model=Detector()
        self.ground_truth_dict = read_results_dict(ground_path)
        self.times=times
        self.result=result
        self.d_pro=diff_processor.DiffProcessor.str2class('edge')(0)
        #self.server=Server(self.args)
        #self.client=Client(self.args.hname, self.args, self.server)

    def reset(self):
        self.idx=30
        self.queue = 0
        state_ =copy.deepcopy(self.states[0])
        #
        self.last_frame =0
        self.diff_last =0
        state_.insert(0,0)
        #
        self.state =np.array(state_)
        #state_.append(self.queue)
        #print(len(self.states[0]))
        return np.array(state_)

    def step(self,action):


        #print(action,self.state)
        #print(self.state)
        s_frames=self.d_pro.batch_diff_noobj_last(np.array(thres)[action],self.state,(self.idx-self.goplen),self.goplen)
        #
        # print('state',self.state)
        # print('s_frames',s_frames)
        #s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]

        final_results=Results()
        #取s_frames中帧做检测的f1score
        f1=0
        s_f1=1
        results=self.result[self.last_frame]
        #print(self.last_frame)
        if s_frames:
            self.last_frame=s_frames[-1]
        time=0
        all_time=0
        #print(self.idx-self.goplen)

        for frame_idx in range(self.idx-self.goplen,self.idx):
            if frame_idx in s_frames:
                #print(raw_images_path,f"{str(frame_idx).zfill(10)}.png")
                # frame=cv.imread(raw_images_path+f"{str(int(frame_idx)).zfill(10)}.png")
                # starttime = T.time()
                # results=self.model.infer(frame)
                # endtime = T.time()
                # time += float(endtime - starttime)
                # #print(results)
                results=self.result[frame_idx]
                time+=self.times[frame_idx]
            all_time+=self.times[frame_idx]
            #print('result',results)
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)
        tp, fp, fn, _, _, _, f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)
        final_results=Results()
        #取s_frames中帧做检测的f1score

        #print(self.idx-self.goplen)
        for frame_idx in range(self.idx-self.goplen,self.idx):

            results=self.result[frame_idx]

            #all_time+=self.times[frame_idx]
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)
        tp, fp, fn, _, _, _, s_f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)

        #print(name,'f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
        reward=self.a1*(f1)/s_f1-self.a2*(time+self.queue)/(all_time)

        # 排队时间
        #self.queue =max(0,(self.queue+time-1))
        ###
        #计算前一个gop剩余feature差值
        state_ = copy.deepcopy(self.states[int(self.idx/self.goplen)])
        if self.idx not in [150,300,450,600,750,900,1050,1350,1680,2280,2700]:
            if s_frames:
                #print('余下的',self.state,self.state[(s_frames[-1]%30)+1:])
                self.diff_last=np.sum(self.state[(s_frames[-1]%30)+1:])+self.diff_gop[int(self.idx/30)-1]
                state_.insert(0,self.diff_last)
            else:
                self.diff_last+=np.sum(self.state)+self.diff_gop[int(self.idx/30)-1]
                state_.insert(0,self.diff_last)
        else:
            state_.insert(0, 0)
        ###
        self.state = np.array(state_)
        self.idx += self.goplen
        #return state_, reward, (self.idx==self.length)
        if self.idx==2970:
            done=True
        else:
            done=False
        #state_.append(self.queue)
        return np.array(state_),reward,done,None,(f1,time)


class Envs:

    def __init__(self, height,width,length,video_path,times,result):
        #self.args=create_args()
        self.height=height
        self.width=width
        self.length=length
        self.path=video_path
        self.idx=0
        self.goplen=30
        self.a1=0.5
        self.a2=0.5
        self.state=[]
        #self.model=Detector()
        self.ground_truth_dict = read_results_dict(ground_path)
        self.times=times
        self.result=result
        #self.server=Server(self.args)
        #self.client=Client(self.args.hname, self.args, self.server)

    def reset(self):
        self.idx=30
        d_pro = diff_processor.DiffProcessor.str2class('area')(0)
        state_ = d_pro.get_diff_vector(self.path, 0, self.goplen)
        self.state =np.array(state_)
        return np.array(state_)

    def step(self,action):

        d_pro=diff_processor.DiffProcessor.str2class('area')(0)

        #print(self.state)
        s_frames=d_pro.batch_diff_noobj(thres[action],self.state,(self.idx-self.goplen),self.goplen)

        # print(s_frames)
        #s_frames = [0, 4, 7, 11, 13, 15, 17, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 38, 42, 46, 50, 53, 56, 59, 60, 63, 66, 69, 74, 80, 87, 90, 102, 111, 116, 120, 131, 140, 147, 150, 180, 210, 240, 270, 300, 309, 316, 321, 325, 329, 330, 341, 348, 353, 358, 360, 367, 390, 405, 412, 416, 419, 420, 436, 443, 448, 450, 456, 459, 462, 465, 471, 479, 480, 486, 494, 500, 504, 507, 510, 516, 521, 529, 540, 546, 552, 559, 565, 570, 582, 589, 600, 607, 615, 621, 625, 629, 630, 637, 646, 655, 660, 667, 675, 687, 690, 697, 703, 710, 716, 720, 735, 747, 750, 759, 766, 775, 780, 792, 799, 804, 808, 810, 814, 818, 821, 825, 829, 833, 836, 839, 840, 842, 843, 845, 847, 849, 851, 854, 859, 867, 870, 880, 888, 894, 899, 900, 916, 927, 930, 940, 946, 952, 960, 970, 975, 984, 990, 1001, 1009, 1020, 1036, 1047, 1050, 1052, 1053, 1055, 1058, 1059, 1062, 1064, 1069, 1073, 1077, 1080, 1085, 1089, 1093, 1097, 1100, 1105, 1110, 1114, 1119, 1125, 1132, 1138, 1140, 1149, 1155, 1162, 1168, 1170, 1182, 1189, 1194, 1200, 1207, 1213, 1219, 1225, 1230, 1237, 1243, 1249, 1257, 1260, 1265, 1272, 1278, 1284, 1290, 1298, 1305, 1313, 1319, 1320, 1325, 1329, 1334, 1339, 1344, 1349, 1350, 1355, 1361, 1369, 1380, 1396, 1402, 1409, 1410, 1428, 1437, 1440, 1444, 1447, 1450, 1454, 1459, 1462, 1466, 1469, 1470, 1476, 1482, 1489, 1496, 1500, 1507, 1515, 1524, 1530, 1537, 1545, 1556, 1560, 1568, 1576, 1584, 1590, 1597, 1604, 1609, 1613, 1617, 1620, 1635, 1645, 1650, 1656, 1661, 1670, 1679, 1680, 1693, 1710, 1724, 1735, 1740, 1755, 1765, 1770, 1777, 1784, 1790, 1795, 1800, 1808, 1815, 1824, 1830, 1835, 1840, 1845, 1851, 1855, 1859, 1860, 1869, 1876, 1885, 1890, 1897, 1905, 1916, 1920, 1928, 1933, 1937, 1942, 1948, 1950, 1958, 1965, 1971, 1977, 1980, 1986, 1991, 1996, 2003, 2010, 2019, 2026, 2033, 2040, 2049, 2061, 2070, 2083, 2090, 2096, 2100, 2107, 2116, 2123, 2130, 2138, 2148, 2158, 2160, 2165, 2170, 2174, 2180, 2184, 2186, 2189, 2190, 2197, 2203, 2208, 2214, 2220, 2228, 2235, 2242, 2249, 2250, 2258, 2266, 2273, 2280, 2292, 2299, 2306, 2310, 2325, 2333, 2340, 2342, 2344, 2346, 2347, 2349, 2352, 2355, 2360, 2365, 2370, 2380, 2386, 2394, 2400, 2410, 2417, 2424, 2429, 2430, 2434, 2437, 2440, 2445, 2457, 2460, 2474, 2483, 2490, 2500, 2505, 2516, 2520, 2535, 2544, 2550, 2565, 2574, 2580, 2589, 2596, 2603, 2609, 2610, 2625, 2636, 2640, 2651, 2660, 2667, 2670, 2685, 2694, 2700, 2730, 2743, 2747, 2751, 2755, 2759, 2760, 2765, 2769, 2775, 2781, 2787, 2790, 2795, 2800, 2805, 2811, 2818, 2820, 2850, 2880, 2910, 2940, 2961]

        final_results=Results()
        #取s_frames中帧做检测的f1score
        f1=0
        s_f1=1
        results=None
        time=0
        all_time=1
        #print(self.idx-self.goplen)

        for frame_idx in range(self.idx-self.goplen,self.idx):
            if frame_idx in s_frames:
                #print(raw_images_path,f"{str(frame_idx).zfill(10)}.png")
                # frame=cv.imread(raw_images_path+f"{str(int(frame_idx)).zfill(10)}.png")
                # starttime = T.time()
                # results=self.model.infer(frame)
                # endtime = T.time()
                # time += float(endtime - starttime)
                # #print(results)
                results=self.result[frame_idx]
                time+=self.times[frame_idx]
            all_time+=self.times[frame_idx]
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)
        tp, fp, fn, _, _, _, f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)
        final_results=Results()
        #取s_frames中帧做检测的f1score

        #print(self.idx-self.goplen)
        for frame_idx in range(self.idx-self.goplen,self.idx):

            results=self.result[frame_idx]

            #all_time+=self.times[frame_idx]
            for label, conf, (x, y, w, h) in results:
                r = Region(frame_idx, x, y, w, h, conf, label,
                           0, origin="mpeg")
                # 从服务器传到client端都origin会重新命名为low-res， 函数get_first_phase_results
                final_results.append(r)
                #print('f_r',final_results.regions_dict)
        tp, fp, fn, _, _, _, s_f1 = evaluate(
            self.idx-1, final_results.regions_dict, self.ground_truth_dict,
            0.3, 0.5, 0.4, 0.4)




        print('f1',f1,"all_f1",s_f1,'Select',s_frames,len(s_frames),'time',time)
        reward=self.a1*(f1)/s_f1-self.a2*time/(all_time)
        ra=self.a1*(f1)/s_f1
        rt=reward-ra
        ###
        state_ = np.array(d_pro.get_diff_vector(self.path, self.idx, self.goplen))
        #state_=self.state
        self.state = state_
        self.idx += self.goplen
        #return state_, reward, (self.idx==self.length)
        if self.idx==2970:
            done=True
        else:
            done=False
        return state_,reward,done,None,ra,rt





# import pickle
# with open("features_res50_1000.txt", "rb") as get_myprofile:
#     features = pickle.load(get_myprofile)
# #pca = PCA(n_components=256)
# X=[]
# X=features
# X=np.array(X)
# print(X.shape)
# pca = PCA(n_components=256) #实例化
# pca = pca.fit(X) #拟合模型
# for i in range(3000):
#     x=[]
#     x.append((features[0]))
#     newX = pca.transform(x)
#     print('finish',i,newX[0].tolist())

# import numpy as np
# from sklearn import decomposition,datasets
# iris=datasets.load_iris()#加载数据
# X=iris['data']
# model=decomposition.PCA(n_components=2)
# print(X.shape)
# model.fit(X)
# X_new=model.fit_transform(X)
# Maxcomponent=model.components_
# ratio=model.explained_variance_ratio_
# score=model.score(X)
# print('降维后的数据:',X_new)
# print('返回具有最大方差的成分:',Maxcomponent)
# print('保留主成分的方差贡献率:',ratio)
# print('所有样本的log似然平均值:',score)
# print('奇异值:',model.singular_values_)
# print('噪声协方差:',model.noise_variance_)


# pi0=nn.LSTM(30, 128, batch_first = False)
# print(pi0.mode)
# for name, param in pi0.named_parameters():
#     if name.startswith("weight"):
#         nn.init.xavier_normal_(param)
#     else:
#         nn.init.zeros_(param)
#

# d_pro = diff_processor.DiffProcessor.str2class('edge')(0)
#
# states,diff_gop= d_pro.get_all_diff_vector(
#     "D:\\shiyan\\server\\server\\my_dds_sr_619\\dataset\\video_test\\src\\video_test.mp4", 30)

